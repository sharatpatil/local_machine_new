import React, { useEffect, useState } from 'react';

const TypingText = ({ text }) => {
  const [displayedText, setDisplayedText] = useState('');

  useEffect(() => {
    let index = 0;
    const interval = setInterval(() => {
      setDisplayedText((prev) => prev + text[index]);
      index++;
      if (index === text.length) {
        clearInterval(interval);
      }
    }, 50); // Adjust the speed of the typing effect here
    return () => clearInterval(interval);
  }, [text]);

  return <p className="text-white text-[12px] break-words flex-grow">{displayedText}</p>;
};

export default TypingText;






import React, { useContext } from "react";
import { AiOutlinePlus } from "react-icons/ai";
import {  FiMessageSquare } from "react-icons/fi";
import { SlOptions } from "react-icons/sl";
import { MdClose } from "react-icons/md";
import { ContextApp } from "../utils/Context";
function Mobile() {
  const { Mobile, setMobile, handleQuery } = useContext(ContextApp);
  return (
    <div className="absolute left-0 top-0 w-full z-50  bg-black/40 flex justify-between items-start">
      <div
        className={
          Mobile
            ? "h-screen bg-gray-900 w-[300px]  flex items-center justify-between p-2 text-white flex-col translate-x-0"
            : "hidden"
        }
      >
        <div className="flex items-start justify-between w-full">
          <span
            className="border border-gray-600  rounded w-full py-2 text-xs flex gap-1 items-center justify-center cursor-pointer "
            onClick={() => {
              localStorage.clear();
              window.location.reload();
            }}
          >
            <AiOutlinePlus fontSize={18} />
            New Chat
          </span>
        </div>
        {/* middle section  */}
        <div className="h-[80%] w-full p-2 flex items-start justify-start flex-col overflow-hidden overflow-y-auto text-sm scroll my-2">
          {/* msg  */}
          <span
            className="rounded w-full py-3 px-2 text-xs my-2 flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300 overflow-hidden truncate whitespace-nowrap"
            value={"What is Programming?"}
            onClick={handleQuery}
          >
            <span className="flex gap-2 items-center justify-center text-base">
              <FiMessageSquare />
              <span className="text-sm">Hi, How are you!</span>
            </span>
          </span>
          <span
            className="rounded w-full py-3 px-2 text-xs my-2 flex gap-2 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300 overflow-hidden truncate whitespace-nowrap "
            value={"How to use an API?"}
            onClick={handleQuery }
            
          >
            <span className="flex gap-2 items-center justify-center text-base">
              <FiMessageSquare />
              <span className="text-sm">Hi, Need help to write Query</span>
            </span>
          </span>
        </div>
        {/* bottom section  */}
        <div className="w-full border-t border-gray-600 flex flex-col gap-2 items-center justify-center p-2">
          {/* <span className="rounded w-full py-2 px-2 text-xs flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300">
            <span className="flex gap-1 items-center justify-center text-sm">
              <FiUser />
              Upgrade to Plus
            </span>
            <span className="rounded-md bg-yellow-200 px-1.5 py-0.5 text-xs font-medium uppercase text-gray-800">
              NEW
            </span>
          </span> */}
          <span className="rounded w-full py-2 px-2 text-xs flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300">
            <span className="flex gap-2 items-center justify-center text-sm font-bold">
              <img
                src="/person.png"
                alt="user"
                className="w-8 h-8 object-cover rounded-sm"
              />
              BPSI AI Model
            </span>
            <span className="rounded-md  px-1.5 py-0.5 text-xs font-medium uppercase text-gray-500">
              <SlOptions />
            </span>
          </span>
        </div>
      </div>
      {Mobile && (
        <span
          className="border border-gray-600 text-white m-2 rounded px-3 py-[9px] flex items-center justify-center cursor-pointer"
          title="Close sidebar"
          onClick={() => setMobile(!Mobile)}
        >
          <MdClose />
        </span>
      )}
    </div>
  );
}

export default Mobile;
?????????



import React, { useContext } from "react";
import { AiOutlinePlus } from "react-icons/ai";
import { LuPanelLeftClose } from "react-icons/lu";
import { FiMessageSquare } from "react-icons/fi";
import { SlOptions } from "react-icons/sl";
import { ContextApp } from "../utils/Context";
function LeftNav() {
  const { setShowSlide, showSlide, handleQuery } = useContext(ContextApp);
  return (
    // top section
    <div
      className={
        !showSlide
          ? "h-screen bg-gray-900 w-[300px] border-r border-gray-500 hidden lg:flex items-center justify-between p-2 text-white flex-col translate-x-0"
          : "hidden"
      }
      
    >
      <div className="flex items-start justify-between w-full">
        <span
          className="border border-gray-600  rounded w-[80%] py-2 text-xs flex gap-1 items-center justify-center cursor-pointer"
          onClick={() => {
            localStorage.clear();
            window.location.reload();
          }}
        >
          <AiOutlinePlus fontSize={18} />
          New Chat
        </span>
        <span
          className="border border-gray-600  rounded px-3 py-[9px] flex items-center justify-center cursor-pointer"
          title="Close sidebar"
          onClick={() => setShowSlide(!showSlide)}
        >
          <LuPanelLeftClose />
        </span>
      </div>
      {/* middle section  */}
      <div className="h-[80%] w-full p-2 flex items-start justify-start flex-col overflow-hidden overflow-y-auto text-sm scroll my-2">
        {/* msg  */}
        <span
          className="rounded w-full py-3 px-2 text-xs my-2 flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300 overflow-hidden truncate whitespace-nowrap"
          value={"What is Programming?"}
          onClick={handleQuery}
        >
          <span className="flex gap-2 items-center justify-center text-base">
            <FiMessageSquare />
            <span className="text-sm">Hi, How are you!</span>
          </span>
        </span>
        <span
          className="rounded w-full py-3 px-2 text-xs my-2 flex gap-2 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300 overflow-hidden truncate whitespace-nowrap "
          value={"How to use an API?"}
          onClick={handleQuery}
        >
          <span className="flex gap-2 items-center justify-center text-base">
            <FiMessageSquare />
            <span className="text-sm">Hi, Need help to write Query</span>
          </span>
        </span>
      </div>
      {/* bottom section  */}
      <div className="w-full border-t border-gray-600 flex flex-col gap-2 items-center justify-center p-2">
        {/* <span className="rounded w-full py-2 px-2 text-xs flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300">
          <span className="flex gap-1 items-center justify-center text-sm">
            <FiUser />
            Upgrade to Plus
          </span>
          <span className="rounded-md bg-yellow-200 px-1.5 py-0.5 text-xs font-medium uppercase text-gray-800">
            NEW
          </span>
        </span> */}
        <span className="rounded w-full py-2 px-2 text-xs flex gap-1 items-center justify-between cursor-pointer hover:bg-gray-800 transition-all duration-300">
          <span className="flex gap-2 items-center justify-center text-sm font-bold">
            <img
              src="/person.png"
              alt="user"
              className="w-8 h-8 object-cover rounded-sm"
            />
            BPSI AI Model
          </span>
          <span className="rounded-md  px-1.5 py-0.5 text-xs font-medium uppercase text-gray-500">
            <SlOptions />
          </span>
        </span>
      </div>
    </div>
  );
}

export default LeftNav;

....


import React, { useContext } from "react";
import { ContextApp } from "../utils/Context";
import { LuPanelLeftOpen } from "react-icons/lu";
import { HiOutlineMenuAlt2 } from "react-icons/hi";
import { RiSendPlane2Fill } from "react-icons/ri";
import Chat from "./Chat";
function ChatContainer() {
  const {
    setShowSlide,
    showSlide,
    setMobile,
    Mobile,
    chatValue,
    setChatValue,
    handleSend,
    handleKeyPress,
  } = useContext(ContextApp);

  return (
    <div
      className={
        showSlide
          ? "h-screen w-screen bg-gray-700 flex items-start justify-between flex-col p-2"
          : "h-screen w-full lg:w-[calc(100%-300px)] bg-gray-700 flex items-start justify-between flex-col p-2"
      }
    >
      <span
        className="rounded px-3 py-[9px] hidden lg:flex items-center justify-center cursor-pointer text-white m-1 hover:bg-gray-600 duration-200"
        title="Open sidebar"
        onClick={() => setShowSlide(!showSlide)}
      >
        {showSlide && <LuPanelLeftOpen />}
      </span>
      <span
        className="rounded px-3 py-[9px] lg:hidden flex items-center justify-center cursor-pointer text-white mt-0 mb-3 border border-gray-600"
        title="Open sidebar"
        onClick={() => setMobile(!Mobile)}
      >
        <HiOutlineMenuAlt2 fontSize={20} />
      </span>
      {/* chat section */}
      <Chat />
      {/* chat input section */}
      <div className=" w-full  m-auto flex items-center justify-center flex-col gap-2 my-2">
       <span className="flex gap-2 items-center justify-center bg-gray-600 rounded-lg shadow-md w-[100%] lg:w-3/5 xl:w-3/4">
  <input
    type="text"
    placeholder="Send a message"
    className="h-full text-white bg-transparent px-3 py-4 w-full border-none outline-none text-base"
    value={chatValue}
    onChange={(e) => setChatValue(e.target.value)}
    onKeyUp={handleKeyPress}
  />
  <RiSendPlane2Fill
    title="send message"
    className={
      chatValue.length <= 0
        ? "text-gray-400 cursor-auto mx-3 text-xl"
        : "text-white cursor-pointer mx-3 text-3xl bg-green-500 p-1 rounded shadow-md "
    }
    onClick={handleSend}
  />
</span>
        <p className="lg:text-xs text-gray-400 text-center text-[10px]">
          BPSI AI Model
        </p>
      </div>
    </div>
  );
}

export default ChatContainer;
....



import React, { useContext } from "react";
import { ContextApp } from "../utils/Context";
import { RiFileCopyLine, RiPlayFill } from 'react-icons/ri';
import { useNavigate } from "react-router-dom";
import TypingText from "./TypingText";


function Chat() {
  const { message, msgEnd } = useContext(ContextApp);
  
  const navigate = useNavigate();
  
  const handleRunClick = (msg) => {
    navigate("/sample", { state: { message: msg } });
  };


  return (
    <div className="w-full h-[85%] flex items-center justify-center overflow-hidden overflow-y-auto px-2 py-1 scroll">
      <div className="w-full lg:w-4/5 flex flex-col h-full items-start justify-start">
        {message?.map((msg, i) => (
          <div
            key={i}
            className={
              msg.isBot
                ? "flex items-start justify-between gap-2 lg:gap-5 my-2 bg-gray-800/80 p-3 rounded-md w-full"
                : "flex items-start justify-between gap-2 lg:gap-5 my-2 p-3 w-full"
            }
          >
            <div className="flex items-start gap-2 lg:gap-5 w-full">
              <img
                src={msg.isBot ? "/scb.jfif" : "/person.png"}
                alt="user"
                className="w-10 h-10 rounded object-cover"
              />
              {/* <p className="text-white text-[12px] break-words flex-grow">{msg?.text}</p> */}
              

              {msg?.text === 'Thinking' ? <TypingText text="Thinking! Please wait!!!" /> : <TypingText text={msg?.text} /> }
            </div>
              {msg.isBot ? ( <div className="relative group">
              <RiPlayFill
                className="text-white cursor-pointer flex-shrink-0"
                onClick={() => {
                  // navigator.clipboard.writeText(msg.text);

                  handleRunClick(msg)
                }}
              />
              <div className="absolute bottom-full mb-2 hidden group-hover:block bg-gray-700 text-white text-xs rounded py-1 px-2">
                Run
              </div>
            </div>) : null }
           

            <div className="relative group">
              <RiFileCopyLine
                className="text-white cursor-pointer flex-shrink-0"
                onClick={() => navigator.clipboard.writeText(msg.text)}
              />
              <div className="absolute bottom-full mb-2 hidden group-hover:block bg-gray-700 text-white text-xs rounded py-1 px-2">
                Copy
              </div>
            </div>

          </div>
        ))}
        <div ref={msgEnd} />
      </div>
    </div>
  );
}

export default Chat;
....



import React, { useContext, useState } from "react";
import { ContextApp } from "../utils/Context";
import { useLocation } from "react-router-dom";




const SamplePage = () => {
    const { msgEnd } = useContext(ContextApp);
    const location = useLocation();
    const { message } = location.state || {};
    const [msg, setMsg] = useState(message.text || "");
    const [jsonResponse, setJsonResponse] = useState({
        res: "response"
    });
    const [isTextareaVisible, setIsTextareaVisible] = useState(true);
    const [isLoading, setIsLoading] = useState(false);

    const onRunClick = async () => {
        console.log("Message:", msg);
        setIsLoading(true);

        try {
            const response = await fetch(`http://localhost:3000/run_query?query=${encodeURIComponent(msg)}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const data = await response.json();
            setJsonResponse(data);
            setIsTextareaVisible(true); // Hide the textarea after the API call
        } catch (error) {
            console.error("There was a problem with the fetch operation:", error);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="w-full bg-gray-700 flex justify-center overflow-hidden overflow-y-auto px-2 py-1 scroll">
            <div className="w-full  lg:w-4/5 flex flex-col py-5">

                <textarea
                    style={{ height: '100px' }}
                    className="bg-gray-800 text-white rounded-md"
                    rows="4"
                    placeholder="Write SQL Query"
                    value={msg}
                    onChange={(e) => setMsg(e.target.value)}
                ></textarea>

                <div className="w-full flex justify-end">
                    <button className="bg-green-500 text-white px-4 py-2 rounded-md my-2"
                        onClick={onRunClick}
                        disabled={isLoading}
                    >
                        {isLoading ? "Loading..." : "Run"}
                    </button>
                </div>
                <div className="w-full flex flex-col items-center gap-2 mt-4" style={{height:'1000px'}}>
                    {isLoading ? (
                        <div className="loader text-white">Loading...</div>
                    ) : (
                        <>
                        <style>
                          {`
                            .no-scrollbar::-webkit-scrollbar {
                              display: none;
                            }
                          `}
                        </style>
                        <pre className="bg-gray-800 text-white p-4 rounded-md w-full overflow-auto no-scrollbar"
                             style={{
                               fontSize: "10px",
                               scrollbarWidth: "none", /* Firefox */
                               msOverflowStyle: "none" /* IE and Edge */
                             }}>
                          {JSON.stringify(jsonResponse, null, 2)}
                        </pre>
                      </>
                    )}
                </div>
                <div ref={msgEnd} />
            </div>
        </div>
    );
};

export default SamplePage;



///


import "./SearchData.scss";
import { useState } from "react";
import Chip from '@mui/material/Chip';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import SimpleDialog from "../Dialog/SimpleDialog";


function SearchData({ data }) {

  const [open, setOpen] = useState(false);
  const [dialogData, setDialogData] = useState('');

  const handleClickOpen = (dialogData) => {

    if (open === true) {
      setOpen(false);
      setDialogData('');
    } else {
      setOpen(true);
      setDialogData(dialogData);
    }
  };

  // const retreivedResults = Array.from(data);
  let count = 0;
  // let userElements = retreivedResults.map(val => {
  //   count++;
  //   return <div variant="outlined" ><Accordion><AccordionSummary expandIcon={<ArrowDropDownIcon />} aria-controls="panel1-content" id="panel1-header"><div class="card"><span><strong class="doc">BPSI Key : {val.bpsiKey}</strong><span>&emsp;<Chip label={val.hitCategory[0]} color="primary" variant="outlined" /></span><span class="modified">Last Modified on {val.lastModified}</span></span><text class="uuid">BPSI UUID: {val.bpsiUUID} | Schema Name: {val.schemaName}</text></div> </AccordionSummary><AccordionDetails><text class="uuid" onClick={() => handleClickOpen(val.resultKeyword)}><strong> Search Hits : </strong> <strong class="result"> {val.resultKeyword} </strong></text><br></br><text class="uuid"><strong> dataLocationURI </strong> : {val.dataLocationURI}</text></AccordionDetails></Accordion></div>;
  // });


  
const renderObject = (obj) => {
  return (
    <ul>
      {Object.entries(obj).map(([key, value]) => (
        <li key={key}>
          <strong>{key}:</strong>{" "}
          {typeof value === "object" && value !== null ? renderObject(value) : value}
        </li>
      ))}
    </ul>
  );
};


  return (
    <div>
      {/* <div><SimpleDialog values={dialogData} open={open}></SimpleDialog></div> */}
      <div>
        <text class="uuid">Showing {data ? data.length : count} results </text>
        <hr />
      </div>
      <div>
        {/* {
          userElements
        } */}

{data.map((item, index) => (
        <div key={index}>
          <h2>Item {index + 1}</h2>
          {renderObject(item)}
        </div>
      ))}
      </div>
    </div>
  );

}
export default SearchData;




import "./SearchData.scss";
import { useState } from "react";
import Chip from "@mui/material/Chip";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import TextField from "@mui/material/TextField";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

function SearchData({ data }) {
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm) return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value.toString())}</span>
          )}
        </div>
      );
    });
  };

  const filteredData = data.filter((item) =>
    JSON.stringify(item).toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <div style={{ marginBottom: 20 }}>
        <TextField
          label="Search"
          variant="outlined"
          fullWidth
          size="small"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <div>
        <p className="uuid">Showing {filteredData.length} results</p>
        <hr />
      </div>
      <div>
        {filteredData.map((item, index) => (
          <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
            <CardContent>
              <Accordion>
                <AccordionSummary
                  expandIcon={<ArrowDropDownIcon />}
                  aria-controls={`panel${index}-content`}
                  id={`panel${index}-header`}
                >
                  <div>
                    <p>
                      <strong>Highlighted Data:</strong>{" "}
                      {Object.entries(item)
                        .filter(([key, value]) =>
                          `${key}${value}`.toLowerCase().includes(searchTerm.toLowerCase())
                        )
                        .map(([key, value]) => (
                          <span key={key}>
                            <strong>{highlightText(key)}:</strong>{" "}
                            {highlightText(value.toString())},&nbsp;
                          </span>
                        ))}
                    </p>
                  </div>
                </AccordionSummary>
                <AccordionDetails>
                  <div>{renderObject(item)}</div>
                </AccordionDetails>
              </Accordion>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

export default SearchData;


ERROR in ./node_modules/@popperjs/core/lib/createPopper.js 1:0-63
Module not found: Error: Can't resolve './dom-utils/getCompositeRect.js' in 'C:\Users\2024698\bpsi-app-projects\react\51437-bpsi-search-ui\node_modules\@popperjs\core\lib'


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm) return text;
    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value.toString())}</span>
          )}
        </div>
      );
    });
  };

  return (
    <div>
      {data.map((item, index) => (
        <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
          <CardContent>
            <Accordion>
              <AccordionSummary
                expandIcon={<ArrowDropDownIcon />}
                aria-controls={`panel${index}-content`}
                id={`panel${index}-header`}
              >
                <div>
                  <p>
                    <strong>Highlighted Data:</strong>{" "}
                    {Object.entries(item)
                      .filter(([key, value]) =>
                        `${key}${value}`.toLowerCase().includes(searchTerm.toLowerCase())
                      )
                      .map(([key, value]) => (
                        <span key={key}>
                          <strong>{highlightText(key)}:</strong>{" "}
                          {highlightText(value.toString())},&nbsp;
                        </span>
                      ))}
                  </p>
                </div>
              </AccordionSummary>
              <AccordionDetails>
                <div>{renderObject(item)}</div>
              </AccordionDetails>
            </Accordion>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default HighlightedCard;



import React from "react";
import HighlightedCard from "./HighlightedCard";

const App = () => {
  const jsonData = [
    {
      id: 1,
      name: "John Doe",
      address: {
        street: "123 Main St",
        city: "New York",
      },
      hobbies: ["reading", "coding"],
    },
    {
      id: 2,
      name: "Jane Smith",
      address: {
        street: "456 Elm St",
        city: "Los Angeles",
      },
      hobbies: ["music", "traveling"],
    },
  ];

  return <HighlightedCard data={jsonData} searchTerm="Jane" />;
};

export default App;

Cannot read properties of null (reading 'toString')
text.split is not a function
TypeError: text.split is not a function

const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const regex = new RegExp(`(${searchTerm})`, "gi");
  const parts = text.split(regex);

  return parts.map((part, index) =>
    part.toLowerCase() === searchTerm.toLowerCase() ? (
      <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
        {part}
      </span>
    ) : (
      part
    )
  );
};


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;
    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value?.toString())}</span>
          )}
        </div>
      );
    });
  };

  return (
    <div>
      {data.map((item, index) => {
        const highlightedData = getHighlightedData(item);

        return (
          <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
            <CardContent>
              <Accordion>
                <AccordionSummary
                  expandIcon={<ArrowDropDownIcon />}
                  aria-controls={`panel${index}-content`}
                  id={`panel${index}-header`}
                >
                  <div>
                    <p>
                      <strong>Highlighted Data:</strong>{" "}
                      {highlightedData.length > 0 ? (
                        highlightedData.map(({ key, value }, i) => (
                          <span key={i}>
                            <strong>{highlightText(key)}:</strong>{" "}
                            {highlightText(value?.toString())},&nbsp;
                          </span>
                        ))
                      ) : (
                        <span>No matches found</span>
                      )}
                    </p>
                  </div>
                </AccordionSummary>
                <AccordionDetails>
                  <div>{renderObject(item)}</div>
                </AccordionDetails>
              </Accordion>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;


Cannot read properties of undefined (reading 'toLowerCase')



const getHighlightedData = (obj) => {
  const result = [];
  Object.entries(obj).forEach(([key, value]) => {
    const keyStr = key?.toString() || ""; // Ensure key is a string
    const valueStr = value?.toString() || ""; // Ensure value is a string

    if (
      (keyStr.toLowerCase().includes(searchTerm.toLowerCase()) ||
        valueStr.toLowerCase().includes(searchTerm.toLowerCase())) &&
      searchTerm
    ) {
      result.push({ key: keyStr, value: valueStr });
    }

    // Recursively check nested objects
    if (typeof value === "object" && value !== null) {
      result.push(...getHighlightedData(value));
    }
  });
  return result;
};


const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const regex = new RegExp(`(${searchTerm})`, "gi");
  const parts = text.split(regex);

  return parts.map((part, index) =>
    part.toLowerCase() === searchTerm.toLowerCase() ? (
      <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
        {part}
      </span>
    ) : (
      part
    )
  );
};


import React, { useState, useRef, useEffect } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import Typography from "@mui/material/Typography";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedIndex, setExpandedIndex] = useState(null);
  const highlightRef = useRef(null);

  const handleExpand = (index) => {
    setExpandedIndex(index === expandedIndex ? null : index);
  };

  useEffect(() => {
    if (highlightRef.current && expandedIndex !== null) {
      highlightRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [expandedIndex]);

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          ref={highlightRef}
          style={{
            backgroundColor: "yellow",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      const keyStr = key?.toString() || ""; // Ensure key is a string
      const valueStr = value?.toString() || ""; // Ensure value is a string

      if (
        (keyStr.toLowerCase().includes(searchTerm.toLowerCase()) ||
          valueStr.toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key: keyStr, value: valueStr });
      }

      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      }
    });
    return result;
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => (
      <div key={parentKey + key} style={{ marginLeft: 20 }}>
        <Typography variant="body2" component="span" style={{ fontWeight: "bold", color: "#3f51b5" }}>
          {highlightText(key)}:
        </Typography>{" "}
        {typeof value === "object" && value !== null ? (
          <div>{renderObject(value, `${parentKey}${key}.`)}</div>
        ) : (
          <Typography variant="body2" component="span">
            {highlightText(value?.toString())}
          </Typography>
        )}
      </div>
    ));
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = getHighlightedData(item);

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 2px 6px rgba(0, 0, 0, 0.1)",
              borderRadius: "10px",
            }}
          >
            <Accordion expanded={expandedIndex === index} onChange={() => handleExpand(index)}>
              <AccordionSummary
                expandIcon={<ArrowDropDownIcon />}
                aria-controls={`panel${index}-content`}
                id={`panel${index}-header`}
                style={{
                  backgroundColor: "#f5f5f5",
                  borderBottom: "1px solid #ddd",
                  borderRadius: expandedIndex === index ? "10px 10px 0 0" : "10px",
                }}
              >
                <Typography variant="h6" style={{ color: "#333" }}>
                  <strong>Highlighted Data:</strong>{" "}
                  {highlightedData.length > 0 ? (
                    highlightedData.map(({ key, value }, i) => (
                      <span key={i}>
                        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                      </span>
                    ))
                  ) : (
                    <span>No matches found</span>
                  )}
                </Typography>
              </AccordionSummary>
              <AccordionDetails
                style={{
                  backgroundColor: "#ffffff",
                  padding: "20px",
                }}
              >
                <div>{renderObject(item)}</div>
              </AccordionDetails>
            </Accordion>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;



import React, { useState, useRef, useEffect } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedStates, setExpandedStates] = useState([]);
  const highlightRef = useRef(null);

  // Initialize expansion state for each JSON object
  useEffect(() => {
    setExpandedStates(new Array(data.length).fill(false));
  }, [data]);

  // Toggle expansion for a specific card
  const toggleExpand = (index) => {
    setExpandedStates((prevStates) =>
      prevStates.map((state, idx) => (idx === index ? !state : state))
    );
  };

  // Scroll to the highlighted text
  const scrollToHighlight = () => {
    if (highlightRef.current) {
      highlightRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  };

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          ref={highlightRef}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => (
      <div key={parentKey + key} style={{ marginLeft: 20, marginBottom: 10 }}>
        <Typography variant="body2" component="span" style={{ fontWeight: "bold", color: "#3f51b5" }}>
          {highlightText(key)}:
        </Typography>{" "}
        {typeof value === "object" && value !== null ? (
          <div>{renderObject(value, `${parentKey}${key}.`)}</div>
        ) : (
          <Typography variant="body2" component="span">
            {highlightText(value?.toString())}
          </Typography>
        )}
      </div>
    ));
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = Object.entries(item).filter(([key, value]) => {
          const keyStr = key?.toString().toLowerCase();
          const valueStr = value?.toString().toLowerCase();
          return (
            searchTerm &&
            (keyStr.includes(searchTerm.toLowerCase()) || valueStr.includes(searchTerm.toLowerCase()))
          );
        });

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              borderRadius: "10px",
              overflow: "hidden",
            }}
          >
            <CardContent
              style={{
                backgroundColor: "#f9f9f9",
                padding: "20px",
                borderBottom: "1px solid #ddd",
              }}
            >
              <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                Highlighted Data:
              </Typography>
              <Box
                style={{
                  display: "flex",
                  flexWrap: "wrap",
                  gap: "10px",
                }}
              >
                {highlightedData.length > 0 ? (
                  highlightedData.map(([key, value], i) => (
                    <Box
                      key={i}
                      style={{
                        backgroundColor: "#e0f7fa",
                        padding: "5px 10px",
                        borderRadius: "6px",
                        boxShadow: "0 1px 4px rgba(0, 0, 0, 0.2)",
                      }}
                    >
                      <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                    </Box>
                  ))
                ) : (
                  <Typography variant="body2" color="textSecondary">
                    No matches found
                  </Typography>
                )}
              </Box>
              <Button
                variant="contained"
                color="primary"
                onClick={() => {
                  toggleExpand(index);
                  scrollToHighlight();
                }}
                style={{ marginTop: "10px" }}
              >
                {expandedStates[index] ? "Collapse -" : "Expand +"}
              </Button>
            </CardContent>
            {expandedStates[index] && (
              <CardContent
                style={{
                  backgroundColor: "#ffffff",
                  padding: "20px",
                  borderTop: "1px solid #ddd",
                }}
              >
                {renderObject(item)}
              </CardContent>
            )}
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;



import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedNodes, setExpandedNodes] = useState({});

  // Toggle expand/collapse for a specific node
  const toggleExpand = (key) => {
    setExpandedNodes((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  // Highlight text based on the search term
  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  // Render JSON data with expand/collapse functionality
  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = `${parentKey}.${key}`;
      const isExpandable = typeof value === "object" && value !== null;

      return (
        <div key={currentKey} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Box display="flex" alignItems="center">
            {isExpandable ? (
              <Box
                onClick={() => toggleExpand(currentKey)}
                style={{ cursor: "pointer", marginRight: "5px" }}
              >
                {expandedNodes[currentKey] ? <RemoveIcon /> : <AddIcon />}
              </Box>
            ) : (
              <Box style={{ width: "24px" }} />
            )}
            <Typography
              variant="body2"
              component="span"
              style={{ fontWeight: "bold", color: "#3f51b5" }}
            >
              {highlightText(key)}:
            </Typography>{" "}
            {!isExpandable && (
              <Typography variant="body2" component="span">
                {highlightText(value?.toString())}
              </Typography>
            )}
          </Box>
          {isExpandable && expandedNodes[currentKey] && (
            <div style={{ marginLeft: "20px" }}>{renderJSON(value, currentKey)}</div>
          )}
        </div>
      );
    });
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = Object.entries(item).filter(([key, value]) => {
          const keyStr = key?.toString().toLowerCase();
          const valueStr = value?.toString().toLowerCase();
          return (
            searchTerm &&
            (keyStr.includes(searchTerm.toLowerCase()) || valueStr.includes(searchTerm.toLowerCase()))
          );
        });

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              borderRadius: "10px",
            }}
          >
            <CardContent
              style={{
                backgroundColor: "#f9f9f9",
                padding: "20px",
                borderBottom: "1px solid #ddd",
              }}
            >
              <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                Highlighted Data:
              </Typography>
              <Box
                style={{
                  display: "flex",
                  flexWrap: "wrap",
                  gap: "10px",
                }}
              >
                {highlightedData.length > 0 ? (
                  highlightedData.map(([key, value], i) => (
                    <Box
                      key={i}
                      style={{
                        backgroundColor: "#e0f7fa",
                        padding: "5px 10px",
                        borderRadius: "6px",
                        boxShadow: "0 1px 4px rgba(0, 0, 0, 0.2)",
                      }}
                    >
                      <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                    </Box>
                  ))
                ) : (
                  <Typography variant="body2" color="textSecondary">
                    No matches found
                  </Typography>
                )}
              </Box>
            </CardContent>
            <CardContent
              style={{
                backgroundColor: "#ffffff",
                padding: "20px",
              }}
            >
              <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                JSON Data:
              </Typography>
              <div>{renderJSON(item)}</div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;
