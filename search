hu.search {
	width: 100%;
	outline: none;
	border: none;
	margin-bottom: 2%;
	height: 50px;
	border-radius: 5px;
}
.search-container {
	position: relative;
	width: 100%;
	margin-bottom: 10px;
}
.search-input {
	width: 100%;
	padding: 10px 10px 10px 40px;
	box-sizing: border-box;
	border: none;
	border-radius: 7px;
	height: 50px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}
.search-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	font-size: 20px;
	color: #888;
	pointer-events: none;
}


import {useState} from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from '@mui/material/Box';
import LinearProgress from '@mui/material/LinearProgress';

function SearchQuery({setData,SetTerm}) {

    const [query,setQuery] = useState("");
    const [loading,setLoading] = useState(false);

    function getData(){  
        setLoading(true);
        SetTerm(query);
        const data = getDataAPI(query).then(data => {
            console.log(data);
            setData(data.data);
            setLoading(false);
        });     

    }

    return(
        <div className="search-container">
       
        <SearchBar
            className="search-input"         
            value={query}
            onChange={e =>setQuery(e)}
            onRequestSearch={() => getData()}
            placeholder="Want to search something ?"
        /> 
        {loading && <Box sx={{ width: '100%' }}><LinearProgress /></Box>}           
        
        </div>
    );
}
export default SearchQuery;



.search-container {
  position: relative;
  width: 100%;
  margin-bottom: 20px;
}

.search-input {
  width: 100%;
  padding: 10px 10px 10px 40px;
  box-sizing: border-box;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}

.search-icon {
  position: absolute;
  top: 50%;
  left: 10px;
  transform: translateY(-50%);
  font-size: 20px;
  color: #888;
  pointer-events: none;
}

.select-dropdown {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 7px;
  margin-bottom: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  font-size: 16px;
  appearance: none;
}





import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm({ query, schema: selectedSchema });
    getDataAPI({ query, schema: selectedSchema }).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;


.search-container {
  display: flex;
  align-items: center;
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 100%;
  margin-bottom: 20px;
}

.select-dropdown {
  flex: 1; /* Adjusts size proportionally */
  height: 50px;
  padding: 10px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  font-size: 16px;
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}


import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm({ query, schema: selectedSchema });
    getDataAPI({ query, schema: selectedSchema }).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;



.search-container {
	display: flex;
	align-items: center;
	align-content: center;
	gap: 10px; /* Spacing between dropdown and search bar */
	width: 80%;
	margin-bottom: 20px;
  }
  
  .select-dropdown {
	flex: 3; /* Adjusts size proportionally */
	height: 68px;
	padding: 10px 10px 10px 40px;
	border: none;
	border-radius: 7px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);

	appearance: none;
  }
  
  .search-input {
	flex: 3; /* Adjusts size proportionally */
	padding: 10px 10px 10px 40px;
	border: none;
	border-radius: 7px;
	height: 50px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  }


.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers horizontally within the parent container */
  position: absolute; /* Enables centering on the viewport */
  top: 50%; /* Vertically centers */
  left: 50%; /* Horizontally centers */
  transform: translate(-50%, -50%); /* Adjusts position to the center */
}

.select-dropdown {
  flex: 3; /* Adjusts size proportionally */
  height: 68px;
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}



.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers the content horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
}

.select-dropdown {
  flex: 3; /* Adjusts size proportionally */
  height: 68px;
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}


.show{
    width: 80%;
    display: flex;
	align-items: center;
	justify-content: center; /* Centers the content horizontally */
    margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
    border-bottom: 1;
    border-bottom-width: 1;
  }


.show {
    width: 80%;
    display: flex;
    align-items: center;
    justify-content: center; /* Centers the content horizontally */
    margin: 0 auto; /* Centers the container within the parent element horizontally */
    margin-bottom: 20px; /* Keeps the existing vertical spacing */
    border-bottom: 1px solid #ccc; /* Adds a thin gray line below */
}



<Card
      variant="outlined"
      style={{
        marginBottom: "20px",
        border: "1px solid #ddd",
        boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        borderRadius: "10px",
        width:'80%',
        
      
      }}
    >


<Card
  variant="outlined"
  style={{
    marginBottom: "20px",
    border: "1px solid #ddd",
    boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
    borderRadius: "10px",
    width: "80%",
    margin: "0 auto", // Centers the Card horizontally
  }}
>
  {/* Card content goes here */}
</Card>


###########################################################################################################################


.search-container {
	display: flex;
	align-items: center;
	justify-content: center; /* Centers the content horizontally */
	gap: 10px; /* Spacing between dropdown and search bar */
	width: 80%;
	margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
	
  }
  
  .select-dropdown {
	flex: 3; /* Adjusts size proportionally */
	height: 48px;
	padding: 0px 0px 0px 0px;
	border: none;
	border-radius: 7px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
	appearance: none;
  }
  
  .search-input {
	flex: 3; /* Adjusts size proportionally */
	padding: 0px 0px 0px 0px;
	border: none;
	border-radius: 7px;
	
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  }

  .line{
	position: relative;
	width: 80%;
	margin-bottom: 10px;
	margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
  }



import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm(query);
    getDataAPI(query).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="line">
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      
    </div>

    {/* Loading Indicator */}
    {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
      </div>
  );
}

export default SearchQuery;




.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers the content horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 0px 10px; /* Added padding for better spacing */
  border: none;
  border-radius: 7px;
  height: 48px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}

.material-dropdown {
  flex: 3;
  height: 48px;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  padding: 0 10px;
}



import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";
import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Option One", value: "option1" },
    { label: "Option Two", value: "option2" },
    { label: "Another Schema Option", value: "option3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm(query);
    getDataAPI(query).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="line">
      <div className="search-container">
        {/* Material-UI Dropdown */}
        <FormControl
          style={{
            flex: 3,
            marginBottom: 0,
            boxShadow: "0 4px 8px 0 rgba(0, 0, 0, 0.2)",
            borderRadius: "7px",
          }}
          variant="outlined"
        >
          <InputLabel id="schema-select-label">Select Schema</InputLabel>
          <Select
            labelId="schema-select-label"
            id="schema-select"
            value={selectedSchema}
            onChange={(e) => setSelectedSchema(e.target.value)}
            className="material-dropdown"
            displayEmpty
            style={{
              padding: "0 10px",
              height: "48px",
              borderRadius: "7px",
              boxShadow: "0 4px 8px 0 rgba(0, 0, 0, 0.2)",
            }}
          >
            <MenuItem value="">
              <em>Select Schema</em>
            </MenuItem>
            {schemaOptions.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        {/* Search Bar */}
        <SearchBar
          className="search-input"
          value={query}
          onChange={(e) => setQuery(e)}
          onRequestSearch={() => getData()}
          placeholder="Want to search something?"
        />
      </div>

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;
