
import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';
import RemoveCircleRoundedIcon from '@mui/icons-material/RemoveCircleRounded';

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedNodes, setExpandedNodes] = useState({});

  // Toggle expand/collapse for a specific node
  const toggleExpand = (key) => {
    setExpandedNodes((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  // Highlight text based on the search term
  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };


  

  // Render JSON data with expand/collapse functionality
  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = `${parentKey}.${key}`;
      const isExpandable = typeof value === "object" && value !== null;

      return (
        <div key={currentKey} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Box display="flex" alignItems="center">
            {isExpandable ? (
              <Box
                onClick={() => toggleExpand(currentKey)}
                style={{ cursor: "pointer", marginRight: "5px" }}
              >
                {expandedNodes[currentKey] ? <RemoveCircleRoundedIcon sx={{color:'red'}} /> : <AddCircleRoundedIcon sx={{color:'#00008B'}}/>}
              </Box>
            ) : (
              <Box style={{ width: "24px" }} />
            )}
            <Typography
              variant="body2"
              component="span"
              style={{ fontWeight: "bold", color: "#3f51b5" }}
            >
              {highlightText(key)}:
            </Typography>{" "}
            {!isExpandable && (
              <Typography variant="body2" component="span">
                {highlightText(value?.toString())}
              </Typography>
            )}
          </Box>
          {isExpandable && expandedNodes[currentKey] && (
            <div style={{ marginLeft: "20px" }}>{renderJSON(value, currentKey)}</div>
          )}
        </div>
      );
    });
  };


  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {

const highlightedData = getHighlightedData(item);
        // const highlightedData = Object.entries(item).filter(([key, value]) => {
        //   const keyStr = key?.toString().toLowerCase();
        //   const valueStr = value?.toString().toLowerCase();
        //   return (
        //     searchTerm &&
        //     (keyStr.includes(searchTerm.toLowerCase()) || valueStr.includes(searchTerm.toLowerCase()))
        //   );
        // });

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              borderRadius: "10px",
            }}
          >
            <CardContent
              style={{
                backgroundColor: "#f9f9f9",
                padding: "20px",
                borderBottom: "1px solid #ddd",
              }}
            >
              {/* <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                Highlighted Data:
              </Typography> */}
              <Box
                style={{
                  display: "flex",
                  flexWrap: "wrap",
                  gap: "10px",
                }}
              >
                <Typography variant="h10" style={{ color: "#333" }}>
                  {/* <strong>Highlighted Data:</strong>{" "} */}
                  {highlightedData.length > 0 ? (
                    highlightedData.map(({ key, value }, i) => (
                      <span key={i}>
                        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                      </span>
                    ))
                  ) : (
                    <span>No matches found</span>
                  )}
                </Typography>
              </Box>
            </CardContent>
            <CardContent
              style={{
                backgroundColor: "#ffffff",
                padding: "20px",
              }}
            >
              {/* <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                JSON Data:
              </Typography> */}
              <div>{renderJSON(item)}</div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddCircleRoundedIcon from "@mui/icons-material/AddCircleRounded";
import RemoveCircleRoundedIcon from "@mui/icons-material/RemoveCircleRounded";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedNodes, setExpandedNodes] = useState({});

  // Toggle expand/collapse for a specific node
  const toggleExpand = (key) => {
    setExpandedNodes((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  // Highlight all occurrences of the search term
  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      regex.test(part) ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  // Render JSON data with expand/collapse functionality
  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = `${parentKey}.${key}`;
      const isExpandable = typeof value === "object" && value !== null;

      return (
        <div key={currentKey} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Box display="flex" alignItems="center">
            {isExpandable ? (
              <Box
                onClick={() => toggleExpand(currentKey)}
                style={{ cursor: "pointer", marginRight: "5px" }}
              >
                {expandedNodes[currentKey] ? (
                  <RemoveCircleRoundedIcon sx={{ color: "red" }} />
                ) : (
                  <AddCircleRoundedIcon sx={{ color: "#00008B" }} />
                )}
              </Box>
            ) : (
              <Box style={{ width: "24px" }} />
            )}
            <Typography
              variant="body2"
              component="span"
              style={{ fontWeight: "bold", color: "#3f51b5" }}
            >
              {highlightText(key)}:
            </Typography>{" "}
            {!isExpandable && (
              <Typography variant="body2" component="span">
                {highlightText(value?.toString())}
              </Typography>
            )}
          </Box>
          {isExpandable && expandedNodes[currentKey] && (
            <div style={{ marginLeft: "20px" }}>{renderJSON(value, currentKey)}</div>
          )}
        </div>
      );
    });
  };

  // Get data containing search term for highlights
  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = getHighlightedData(item);

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              borderRadius: "10px",
            }}
          >
            <CardContent
              style={{
                backgroundColor: "#f9f9f9",
                padding: "20px",
                borderBottom: "1px solid #ddd",
              }}
            >
              <Box
                style={{
                  display: "flex",
                  flexWrap: "wrap",
                  gap: "10px",
                }}
              >
                <Typography variant="body2" style={{ color: "#333" }}>
                  {highlightedData.length > 0 ? (
                    highlightedData.map(({ key, value }, i) => (
                      <span key={i}>
                        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                      </span>
                    ))
                  ) : (
                    <span>No matches found</span>
                  )}
                </Typography>
              </Box>
            </CardContent>
            <CardContent
              style={{
                backgroundColor: "#ffffff",
                padding: "20px",
              }}
            >
              <div>{renderJSON(item)}</div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;