
import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddCircleRoundedIcon from "@mui/icons-material/AddCircleRounded";
import RemoveCircleRoundedIcon from "@mui/icons-material/RemoveCircleRounded";

const HighlightedCardItem = ({ item, searchTerm }) => {
  const [expandedNodes, setExpandedNodes] = useState({});

  const toggleExpand = (key) => {
    setExpandedNodes((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = `${parentKey}.${key}`;
      const isExpandable = typeof value === "object" && value !== null;

      return (
        <div key={currentKey} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Box display="flex" alignItems="center">
            {isExpandable ? (
              <Box
                onClick={() => toggleExpand(currentKey)}
                style={{ cursor: "pointer", marginRight: "5px" }}
              >
                {expandedNodes[currentKey] ? (
                  <RemoveCircleRoundedIcon sx={{ color: "red" }} />
                ) : (
                  <AddCircleRoundedIcon sx={{ color: "#00008B" }} />
                )}
              </Box>
            ) : (
              <Box style={{ width: "24px" }} />
            )}
            <Typography
              variant="body2"
              component="span"
              style={{ fontWeight: "bold", color: "#3f51b5", fontSize:12 }}
            >
              {highlightText(key)}:
            </Typography>{" "}
            {!isExpandable && (
              <Typography variant="body2" component="span" style={{fontSize:12}}>
                {highlightText(value?.toString())}
              </Typography>
            )}
          </Box>
          {isExpandable && expandedNodes[currentKey] && (
            <div style={{ marginLeft: "20px" }}>{renderJSON(value, currentKey)}</div>
          )}
        </div>
      );
    });
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const highlightedData = getHighlightedData(item);

  return (
    <Card
      variant="outlined"
      style={{
        marginBottom: "20px",
        border: "1px solid #ddd",
        boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        borderRadius: "10px",
      }}
    >
      <CardContent
        style={{
          backgroundColor: "#f9f9f9",
          padding: "20px",
          borderBottom: "1px solid #ddd",
        }}
      >
        <Box style={{ display: "flex", flexWrap: "wrap", gap: "10px" }}>
          <Typography variant="h10" style={{ color: "#333", fontSize:14 }}>
            {highlightedData.length > 0 ? (
              highlightedData.map(({ key, value }, i) => (
                <span key={i}>
                  <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                </span>
              ))
            ) : (
              <span>No matches found</span>
            )}
          </Typography>
        </Box>
      </CardContent>
      <CardContent style={{ backgroundColor: "#ffffff", padding: "20px" }}>
        <div>{renderJSON(item)}</div>
      </CardContent>
    </Card>
  );
};

const HighlightedCard = ({ data, searchTerm }) => {
  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => (
        <HighlightedCardItem key={index} item={item} searchTerm={searchTerm} />
      ))}
    </div>
  );
};

export default HighlightedCard;


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";

const HighlightedCardItem = ({ item, searchTerm }) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [filterText, setFilterText] = useState("");

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const isExpandable = typeof value === "object" && value !== null;
      const matchesFilter =
        key.toLowerCase().includes(filterText.toLowerCase()) ||
        (!isExpandable &&
          value?.toString().toLowerCase().includes(filterText.toLowerCase()));

      if (!matchesFilter) return null;

      return (
        <div key={`${parentKey}.${key}`} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Typography
            variant="body2"
            component="span"
            style={{ fontWeight: "bold", color: "#3f51b5", fontSize: 12 }}
          >
            {highlightText(key)}:
          </Typography>{" "}
          {isExpandable ? (
            <div>{renderJSON(value, `${parentKey}.${key}`)}</div>
          ) : (
            <Typography variant="body2" component="span" style={{ fontSize: 12 }}>
              {highlightText(value?.toString())}
            </Typography>
          )}
        </div>
      );
    });
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const highlightedData = getHighlightedData(item);

  return (
    <Card
      variant="outlined"
      style={{
        marginBottom: "20px",
        border: "1px solid #ddd",
        boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        borderRadius: "10px",
      }}
    >
      <CardContent
        style={{
          backgroundColor: "#f9f9f9",
          padding: "20px",
          borderBottom: "1px solid #ddd",
        }}
      >
        <Box style={{ display: "flex", flexWrap: "wrap", gap: "10px" }}>
          <Typography variant="h10" style={{ color: "#333", fontSize: 14 }}>
            {highlightedData.length > 0 ? (
              highlightedData.map(({ key, value }, i) => (
                <span key={i}>
                  <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                </span>
              ))
            ) : (
              <span>No matches found</span>
            )}
          </Typography>
        </Box>
      </CardContent>
      <CardContent style={{ backgroundColor: "#ffffff", padding: "20px" }}>
        <Button
          variant="outlined"
          style={{ color: "#3f51b5" }}
          onClick={() => setModalOpen(true)}
        >
          View JSON
        </Button>
        <Modal
          open={modalOpen}
          onClose={() => setModalOpen(false)}
          aria-labelledby="json-modal"
          aria-describedby="json-modal-description"
        >
          <Box
            sx={{
              position: "absolute",
              top: "50%",
              left: "50%",
              transform: "translate(-50%, -50%)",
              width: 600,
              bgcolor: "background.paper",
              border: "2px solid #000",
              boxShadow: 24,
              p: 4,
              borderRadius: "10px",
              maxHeight: "80%",
              overflowY: "auto",
            }}
          >
            <Typography id="json-modal" variant="h6" component="h2" gutterBottom>
              JSON Viewer
            </Typography>
            <TextField
              fullWidth
              variant="outlined"
              label="Filter JSON"
              value={filterText}
              onChange={(e) => setFilterText(e.target.value)}
              style={{ marginBottom: "20px" }}
            />
            <div>{renderJSON(item)}</div>
          </Box>
        </Modal>
      </CardContent>
    </Card>
  );
};

const HighlightedCard = ({ data, searchTerm }) => {
  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => (
        <HighlightedCardItem key={index} item={item} searchTerm={searchTerm} />
      ))}
    </div>
  );
};

export default HighlightedCard;



ERROR in ./node_modules/@popperjs/core/lib/createPopper.js 1:0-63
Module not found: Error: Can't resolve './dom-utils/getCompositeRect.js' in 'C:\Users\2024698\bpsi-app-projects\react\51437-bpsi-search-ui\node_modules\@popperjs\core\lib'


