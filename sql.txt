hiSQL QUERY ..


CREATE TABLE devices(
  id INT IDENTITY(1,1) PRIMARY KEY,
  device_id NVARCHAR(255),
  device_number1 NVARCHAR(255),
  device_number2 NVARCHAR (255),
  device_number3 NVARCHAR (255),
  device_number4 NVARCHAR (255),
  parameter_name1 NVARCHAR(255),
  parameter_name2 NVARCHAR(255),
  parameter_name3 NVARCHAR(255),
  parameter_name4 NVARCHAR(255),
  parameter_name5 NVARCHAR(255),
  parameter_name6 NVARCHAR(255),
  parameter_name7 NVARCHAR(255),
  parameter_name8 NVARCHAR(255),
  parameter_name9 NVARCHAR(255),
  parameter_name10 NVARCHAR(255),
  device_name NVARCHAR(255),
  parameter1 NVARCHAR(255),
  parameter2 NVARCHAR(255),
  parameter3 NVARCHAR(255),
  parameter4 NVARCHAR(255),
  parameter5 NVARCHAR(255),
  parameter6 NVARCHAR(255),
  parameter7 NVARCHAR(255),
  parameter8 NVARCHAR(255),
  parameter9 NVARCHAR(255),
  parameter10 NVARCHAR(255),
  user_id INT,
  created_at DATETIME DEFAULT GETDATE(),
  updated_at DATETIME DEFAULT GETDATE()
);

CREATE TABLE Config
(
    id INT PRIMARY KEY IDENTITY(1,1),
    parameter_name NVARCHAR(255),
    upper_limit DECIMAL(10,4),
    lower_limit DECIMAL(10,4),
    createdAt DATETIME,
    updatedAt DATETIME
);


INSERT INTO Config (parameter_name, upper_limit, lower_limit)
VALUES ('parameter1', 10, 8),
       ('parameter2', 5, 4),
       ('parameter3', 20.2, 0),
       ('parameter4', 12.8, 0),
       ('parameter5', 18.9, 0),
       ('parameter6', 22.1, 0),
       ('parameter7', 16.7, 0),
       ('parameter8', 9.3, 0),
       ('parameter9', 11.6, 0),
       ('parameter10', 14.2, 0);



IDS: https://drive.google.com/drive/folders/1LnjQEqID65m3qKEK4PwyXecGE4QeeN5M?usp=sharing

IDS AVG : https://drive.google.com/drive/folders/1H4gzaV54opIDYxW9fjD-jGQD8_5lrKmw?usp=sharing

https://drive.google.com/drive/folders/1H4gzaV54opIDYxW9fjD-jGQD8_5lrKmw?usp=sharing


DO $$ 
DECLARE
    r RECORD;
    search_term TEXT := 'John';  -- Replace with your search term
    query TEXT;
BEGIN
    -- Loop over all tables and JSON columns
    FOR r IN 
        SELECT table_name, column_name
        FROM information_schema.columns
        WHERE data_type IN ('json', 'jsonb')
    LOOP
        -- Dynamically generate query for full-text search across JSON data
        query := format('
            SELECT ''%s'' AS table_name, * 
            FROM %I 
            WHERE to_tsvector(''english'', 
                string_agg(kv.key || '':'|| kv.value, '' ')) 
                @@ plainto_tsquery(''english'', %L)
            FROM jsonb_each_text(%I.%I) AS kv', 
            r.table_name, r.table_name, search_term, r.column_name);
        
        -- Execute the dynamically generated query
        EXECUTE query;
    END LOOP;
END $$;


const express = require('express');
const { Client } = require('pg');
const app = express();
const port = 3000;

// Setup PostgreSQL client
const client = new Client({
    host: 'localhost', // Update with your PostgreSQL host
    port: 5432,        // Update with your PostgreSQL port
    user: 'your_user', // Update with your PostgreSQL user
    password: 'your_password', // Update with your PostgreSQL password
    database: 'your_database'  // Update with your database name
});

// Connect to PostgreSQL database
client.connect();

// Route for searching a specific value across all JSON columns in the database
app.get('/search', async (req, res) => {
    const searchValue = req.query.value;  // Take search value from query params

    if (!searchValue) {
        return res.status(400).send('Please provide a search value.');
    }

    try {
        // Get all JSON columns from the database
        const result = await client.query(`
            SELECT table_name, column_name
            FROM information_schema.columns
            WHERE data_type IN ('json', 'jsonb')
        `);

        // Loop through all tables and columns and dynamically search each JSON column
        const queries = result.rows.map(row => {
            const { table_name, column_name } = row;

            return client.query(`
                SELECT '${table_name}' AS table_name, * 
                FROM ${table_name}
                WHERE EXISTS (
                    SELECT 1
                    FROM jsonb_each_text(${table_name}.${column_name}) AS kv
                    WHERE kv.value = $1
                )
            `, [searchValue]);
        });

        // Execute all queries concurrently
        const searchResults = await Promise.all(queries);

        // Flatten the results and send them as the response
        const flattenedResults = searchResults.flatMap(result => result.rows);
        res.json(flattenedResults);
    } catch (error) {
        console.error('Error querying database:', error);
        res.status(500).send('An error occurred while searching the database.');
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});





latest
const express = require('express');
const { Client } = require('pg');
const app = express();
const port = 3000;

// Setup PostgreSQL client
const client = new Client({
    host: 'localhost', // PostgreSQL host
    port: 5432,        // PostgreSQL port
    user: 'your_user', // PostgreSQL user
    password: 'your_password', // PostgreSQL password
    database: 'your_database'  // Database name
});

// Connect to PostgreSQL database
client.connect();

// Route for searching a specific value in JSON column of a single table using regex
app.get('/search', async (req, res) => {
    const { search, table, column } = req.query;  // Retrieve search text, table, and column from query params

    if (!search || !table || !column) {
        return res.status(400).send('Please provide search term, table, and column.');
    }

    try {
        // Use regex to search within the JSONB column (cast to text)
        const query = `
            SELECT * 
            FROM ${table}
            WHERE ${column}::text ~* $1  -- Using case-insensitive regex match for JSONB field
        `;

        // Perform the query with the provided search value
        const result = await client.query(query, [`${search}`]);

        // Return the search results
        res.json(result.rows);
    } catch (error) {
        console.error('Error querying database:', error);
        res.status(500).send('An error occurred while searching the database.');
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});