import "./SearchData.scss";
import { useState } from "react";
import Chip from '@mui/material/Chip';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import SimpleDialog from "../Dialog/SimpleDialog";


function SearchData({ data }) {

  const [open, setOpen] = useState(false);
  const [dialogData, setDialogData] = useState('');

  const handleClickOpen = (dialogData) => {

    if (open === true) {
      setOpen(false);
      setDialogData('');
    } else {
      setOpen(true);
      setDialogData(dialogData);
    }
  };

  // const retreivedResults = Array.from(data);
  let count = 0;
  // let userElements = retreivedResults.map(val => {
  //   count++;
  //   return <div variant="outlined" ><Accordion><AccordionSummary expandIcon={<ArrowDropDownIcon />} aria-controls="panel1-content" id="panel1-header"><div class="card"><span><strong class="doc">BPSI Key : {val.bpsiKey}</strong><span>&emsp;<Chip label={val.hitCategory[0]} color="primary" variant="outlined" /></span><span class="modified">Last Modified on {val.lastModified}</span></span><text class="uuid">BPSI UUID: {val.bpsiUUID} | Schema Name: {val.schemaName}</text></div> </AccordionSummary><AccordionDetails><text class="uuid" onClick={() => handleClickOpen(val.resultKeyword)}><strong> Search Hits : </strong> <strong class="result"> {val.resultKeyword} </strong></text><br></br><text class="uuid"><strong> dataLocationURI </strong> : {val.dataLocationURI}</text></AccordionDetails></Accordion></div>;
  // });


  
const renderObject = (obj) => {
  return (
    <ul>
      {Object.entries(obj).map(([key, value]) => (
        <li key={key}>
          <strong>{key}:</strong>{" "}
          {typeof value === "object" && value !== null ? renderObject(value) : value}
        </li>
      ))}
    </ul>
  );
};


  return (
    <div>
      {/* <div><SimpleDialog values={dialogData} open={open}></SimpleDialog></div> */}
      <div>
        <text class="uuid">Showing {data ? data.length : count} results </text>
        <hr />
      </div>
      <div>
        {/* {
          userElements
        } */}

{data.map((item, index) => (
        <div key={index}>
          <h2>Item {index + 1}</h2>
          {renderObject(item)}
        </div>
      ))}
      </div>
    </div>
  );

}
export default SearchData;




import "./SearchData.scss";
import { useState } from "react";
import Chip from "@mui/material/Chip";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import TextField from "@mui/material/TextField";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

function SearchData({ data }) {
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm) return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value.toString())}</span>
          )}
        </div>
      );
    });
  };

  const filteredData = data.filter((item) =>
    JSON.stringify(item).toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <div style={{ marginBottom: 20 }}>
        <TextField
          label="Search"
          variant="outlined"
          fullWidth
          size="small"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <div>
        <p className="uuid">Showing {filteredData.length} results</p>
        <hr />
      </div>
      <div>
        {filteredData.map((item, index) => (
          <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
            <CardContent>
              <Accordion>
                <AccordionSummary
                  expandIcon={<ArrowDropDownIcon />}
                  aria-controls={`panel${index}-content`}
                  id={`panel${index}-header`}
                >
                  <div>
                    <p>
                      <strong>Highlighted Data:</strong>{" "}
                      {Object.entries(item)
                        .filter(([key, value]) =>
                          `${key}${value}`.toLowerCase().includes(searchTerm.toLowerCase())
                        )
                        .map(([key, value]) => (
                          <span key={key}>
                            <strong>{highlightText(key)}:</strong>{" "}
                            {highlightText(value.toString())},&nbsp;
                          </span>
                        ))}
                    </p>
                  </div>
                </AccordionSummary>
                <AccordionDetails>
                  <div>{renderObject(item)}</div>
                </AccordionDetails>
              </Accordion>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

export default SearchData;


ERROR in ./node_modules/@popperjs/core/lib/createPopper.js 1:0-63
Module not found: Error: Can't resolve './dom-utils/getCompositeRect.js' in 'C:\Users\2024698\bpsi-app-projects\react\51437-bpsi-search-ui\node_modules\@popperjs\core\lib'


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm) return text;
    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value.toString())}</span>
          )}
        </div>
      );
    });
  };

  return (
    <div>
      {data.map((item, index) => (
        <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
          <CardContent>
            <Accordion>
              <AccordionSummary
                expandIcon={<ArrowDropDownIcon />}
                aria-controls={`panel${index}-content`}
                id={`panel${index}-header`}
              >
                <div>
                  <p>
                    <strong>Highlighted Data:</strong>{" "}
                    {Object.entries(item)
                      .filter(([key, value]) =>
                        `${key}${value}`.toLowerCase().includes(searchTerm.toLowerCase())
                      )
                      .map(([key, value]) => (
                        <span key={key}>
                          <strong>{highlightText(key)}:</strong>{" "}
                          {highlightText(value.toString())},&nbsp;
                        </span>
                      ))}
                  </p>
                </div>
              </AccordionSummary>
              <AccordionDetails>
                <div>{renderObject(item)}</div>
              </AccordionDetails>
            </Accordion>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default HighlightedCard;



import React from "react";
import HighlightedCard from "./HighlightedCard";

const App = () => {
  const jsonData = [
    {
      id: 1,
      name: "John Doe",
      address: {
        street: "123 Main St",
        city: "New York",
      },
      hobbies: ["reading", "coding"],
    },
    {
      id: 2,
      name: "Jane Smith",
      address: {
        street: "456 Elm St",
        city: "Los Angeles",
      },
      hobbies: ["music", "traveling"],
    },
  ];

  return <HighlightedCard data={jsonData} searchTerm="Jane" />;
};

export default App;

Cannot read properties of null (reading 'toString')
text.split is not a function
TypeError: text.split is not a function

const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const regex = new RegExp(`(${searchTerm})`, "gi");
  const parts = text.split(regex);

  return parts.map((part, index) =>
    part.toLowerCase() === searchTerm.toLowerCase() ? (
      <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
        {part}
      </span>
    ) : (
      part
    )
  );
};


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedKeys, setExpandedKeys] = useState({});

  const toggleExpand = (key) => {
    setExpandedKeys((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;
    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const currentKey = parentKey ? `${parentKey}.${key}` : key;

      return (
        <div key={currentKey} style={{ marginLeft: 20 }}>
          <button
            onClick={() => toggleExpand(currentKey)}
            style={{
              border: "none",
              background: "none",
              cursor: "pointer",
              color: "blue",
              fontWeight: "bold",
            }}
          >
            {typeof value === "object" && value !== null
              ? expandedKeys[currentKey]
                ? "-"
                : "+"
              : ""}
          </button>
          <strong>{highlightText(key)}:</strong>{" "}
          {typeof value === "object" && value !== null ? (
            expandedKeys[currentKey] ? renderObject(value, currentKey) : null
          ) : (
            <span>{highlightText(value?.toString())}</span>
          )}
        </div>
      );
    });
  };

  return (
    <div>
      {data.map((item, index) => {
        const highlightedData = getHighlightedData(item);

        return (
          <Card key={index} variant="outlined" style={{ marginBottom: 20 }}>
            <CardContent>
              <Accordion>
                <AccordionSummary
                  expandIcon={<ArrowDropDownIcon />}
                  aria-controls={`panel${index}-content`}
                  id={`panel${index}-header`}
                >
                  <div>
                    <p>
                      <strong>Highlighted Data:</strong>{" "}
                      {highlightedData.length > 0 ? (
                        highlightedData.map(({ key, value }, i) => (
                          <span key={i}>
                            <strong>{highlightText(key)}:</strong>{" "}
                            {highlightText(value?.toString())},&nbsp;
                          </span>
                        ))
                      ) : (
                        <span>No matches found</span>
                      )}
                    </p>
                  </div>
                </AccordionSummary>
                <AccordionDetails>
                  <div>{renderObject(item)}</div>
                </AccordionDetails>
              </Accordion>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;


Cannot read properties of undefined (reading 'toLowerCase')



const getHighlightedData = (obj) => {
  const result = [];
  Object.entries(obj).forEach(([key, value]) => {
    const keyStr = key?.toString() || ""; // Ensure key is a string
    const valueStr = value?.toString() || ""; // Ensure value is a string

    if (
      (keyStr.toLowerCase().includes(searchTerm.toLowerCase()) ||
        valueStr.toLowerCase().includes(searchTerm.toLowerCase())) &&
      searchTerm
    ) {
      result.push({ key: keyStr, value: valueStr });
    }

    // Recursively check nested objects
    if (typeof value === "object" && value !== null) {
      result.push(...getHighlightedData(value));
    }
  });
  return result;
};


const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const regex = new RegExp(`(${searchTerm})`, "gi");
  const parts = text.split(regex);

  return parts.map((part, index) =>
    part.toLowerCase() === searchTerm.toLowerCase() ? (
      <span key={index} style={{ backgroundColor: "yellow", fontWeight: "bold" }}>
        {part}
      </span>
    ) : (
      part
    )
  );
};


import React, { useState, useRef, useEffect } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import Typography from "@mui/material/Typography";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedIndex, setExpandedIndex] = useState(null);
  const highlightRef = useRef(null);

  const handleExpand = (index) => {
    setExpandedIndex(index === expandedIndex ? null : index);
  };

  useEffect(() => {
    if (highlightRef.current && expandedIndex !== null) {
      highlightRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [expandedIndex]);

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          ref={highlightRef}
          style={{
            backgroundColor: "yellow",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      const keyStr = key?.toString() || ""; // Ensure key is a string
      const valueStr = value?.toString() || ""; // Ensure value is a string

      if (
        (keyStr.toLowerCase().includes(searchTerm.toLowerCase()) ||
          valueStr.toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key: keyStr, value: valueStr });
      }

      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      }
    });
    return result;
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => (
      <div key={parentKey + key} style={{ marginLeft: 20 }}>
        <Typography variant="body2" component="span" style={{ fontWeight: "bold", color: "#3f51b5" }}>
          {highlightText(key)}:
        </Typography>{" "}
        {typeof value === "object" && value !== null ? (
          <div>{renderObject(value, `${parentKey}${key}.`)}</div>
        ) : (
          <Typography variant="body2" component="span">
            {highlightText(value?.toString())}
          </Typography>
        )}
      </div>
    ));
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = getHighlightedData(item);

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 2px 6px rgba(0, 0, 0, 0.1)",
              borderRadius: "10px",
            }}
          >
            <Accordion expanded={expandedIndex === index} onChange={() => handleExpand(index)}>
              <AccordionSummary
                expandIcon={<ArrowDropDownIcon />}
                aria-controls={`panel${index}-content`}
                id={`panel${index}-header`}
                style={{
                  backgroundColor: "#f5f5f5",
                  borderBottom: "1px solid #ddd",
                  borderRadius: expandedIndex === index ? "10px 10px 0 0" : "10px",
                }}
              >
                <Typography variant="h6" style={{ color: "#333" }}>
                  <strong>Highlighted Data:</strong>{" "}
                  {highlightedData.length > 0 ? (
                    highlightedData.map(({ key, value }, i) => (
                      <span key={i}>
                        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                      </span>
                    ))
                  ) : (
                    <span>No matches found</span>
                  )}
                </Typography>
              </AccordionSummary>
              <AccordionDetails
                style={{
                  backgroundColor: "#ffffff",
                  padding: "20px",
                }}
              >
                <div>{renderObject(item)}</div>
              </AccordionDetails>
            </Accordion>
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;



import React, { useState, useRef, useEffect } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";

const HighlightedCard = ({ data, searchTerm }) => {
  const [expandedStates, setExpandedStates] = useState([]);
  const highlightRef = useRef(null);

  // Initialize expansion state for each JSON object
  useEffect(() => {
    setExpandedStates(new Array(data.length).fill(false));
  }, [data]);

  // Toggle expansion for a specific card
  const toggleExpand = (index) => {
    setExpandedStates((prevStates) =>
      prevStates.map((state, idx) => (idx === index ? !state : state))
    );
  };

  // Scroll to the highlighted text
  const scrollToHighlight = () => {
    if (highlightRef.current) {
      highlightRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  };

  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          ref={highlightRef}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            color: "#d32f2f",
            padding: "2px 4px",
            borderRadius: "4px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

  const renderObject = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => (
      <div key={parentKey + key} style={{ marginLeft: 20, marginBottom: 10 }}>
        <Typography variant="body2" component="span" style={{ fontWeight: "bold", color: "#3f51b5" }}>
          {highlightText(key)}:
        </Typography>{" "}
        {typeof value === "object" && value !== null ? (
          <div>{renderObject(value, `${parentKey}${key}.`)}</div>
        ) : (
          <Typography variant="body2" component="span">
            {highlightText(value?.toString())}
          </Typography>
        )}
      </div>
    ));
  };

  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => {
        const highlightedData = Object.entries(item).filter(([key, value]) => {
          const keyStr = key?.toString().toLowerCase();
          const valueStr = value?.toString().toLowerCase();
          return (
            searchTerm &&
            (keyStr.includes(searchTerm.toLowerCase()) || valueStr.includes(searchTerm.toLowerCase()))
          );
        });

        return (
          <Card
            key={index}
            variant="outlined"
            style={{
              marginBottom: "20px",
              border: "1px solid #ddd",
              boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
              borderRadius: "10px",
              overflow: "hidden",
            }}
          >
            <CardContent
              style={{
                backgroundColor: "#f9f9f9",
                padding: "20px",
                borderBottom: "1px solid #ddd",
              }}
            >
              <Typography variant="h6" style={{ marginBottom: "10px", color: "#333" }}>
                Highlighted Data:
              </Typography>
              <Box
                style={{
                  display: "flex",
                  flexWrap: "wrap",
                  gap: "10px",
                }}
              >
                {highlightedData.length > 0 ? (
                  highlightedData.map(([key, value], i) => (
                    <Box
                      key={i}
                      style={{
                        backgroundColor: "#e0f7fa",
                        padding: "5px 10px",
                        borderRadius: "6px",
                        boxShadow: "0 1px 4px rgba(0, 0, 0, 0.2)",
                      }}
                    >
                      <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
                    </Box>
                  ))
                ) : (
                  <Typography variant="body2" color="textSecondary">
                    No matches found
                  </Typography>
                )}
              </Box>
              <Button
                variant="contained"
                color="primary"
                onClick={() => {
                  toggleExpand(index);
                  scrollToHighlight();
                }}
                style={{ marginTop: "10px" }}
              >
                {expandedStates[index] ? "Collapse -" : "Expand +"}
              </Button>
            </CardContent>
            {expandedStates[index] && (
              <CardContent
                style={{
                  backgroundColor: "#ffffff",
                  padding: "20px",
                  borderTop: "1px solid #ddd",
                }}
              >
                {renderObject(item)}
              </CardContent>
            )}
          </Card>
        );
      })}
    </div>
  );
};

export default HighlightedCard;