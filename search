import './Navbar.scss';
import 'font-awesome/css/font-awesome.min.css';
import AddCircleRoundedIcon from "@mui/icons-material/AddCircleRounded";
import PolicyIcon from '@mui/icons-material/Policy';

function Navbar() {
  return (
    <div className="navBar">
      <div />
      <img className="logo" src="Images/sc-logo.svg" alt="Logo" />
      <div className="bpsi">
        BPSI  
        <span className="bpsi-title">
          Smart 
          <PolicyIcon /> 
        </span>
      </div>
      <div className="user">
        <span className="user-icon">
          {/* <i className="fas fa-user" /> */}
          <div className="user-name">BPSI Team</div>
        </span>
      </div>
    </div>
  );
}

export default Navbar;


///////////


import './Navbar.scss';
import 'font-awesome/css/font-awesome.min.css';
import AddCircleRoundedIcon from "@mui/icons-material/AddCircleRounded";
import PolicyIcon from '@mui/icons-material/Policy';

function Navbar () {

    return (
        <div className="navBar">
        <div />
        <img className="logo" src="Images/sc-logo.svg" />
        <text className="bpsi">BPSI  <text className="bpsi-title">Smart <PolicyIcon /> </text> </text>
       
        <div className="user">
          <span className="user-icon">
            { /* <i className="fas fa-user" /> */ }
            <span>
              <div className="user-name">BPSI Team</div>
            </span>
          </span>
        </div>
      </div>

  );
}

export default Navbar;


@use '../../Colors.scss' as c;

.navBar {
	height: 60px;
	width: 100%;
	background-image: linear-gradient(to right,#00008B, #0096FF);
	display: flex;
}

.logo {
	margin-left: 20px;
	margin-right: 20px;
	margin-top: 10px;
	margin-bottom: 10px;
}

.bpsi {
	color: #0FFF50;
	flex-grow: 1;
	margin-top: 20px;
}

.bpsi-title{
	color: #fff;
	flex-grow: 1;
	margin-top: 20px;
	font-weight: bold;
}

.user {
	float: right;
	margin-left: 20px;
	margin-right: 20px;
	margin-top: 10px;
	display: flex;
}

.user-name {
	color: white;
	font-size: medium;
	margin-top: 10px;
}

.user-icon {
	font-size: 20px;
	margin-right: 10px;
	color: white;
}


////////////





.show {
  width: 80%;
  display: flex;
  align-items: center;
  justify-content: space-between; /* Distributes space evenly between text1 and text2 */
  margin: 0 auto; /* Centers the container horizontally */
  margin-bottom: 20px; /* Adds vertical spacing */
  border-bottom: 1px solid #ccc; /* Adds a thin gray line below */
  gap: 10px; /* Adds space between text and other elements if necessary */
}

.uuid {
  font-size: 14px; /* Adjust text size */
  color: #333; /* Optional: Adjust text color */
}





<div className="show">
  <text class="uuid">Showing {data ? data.length : count} results</text>
  <text class="uuid">Page 1 of 10</text>
  <hr />
</div>


.show {
  width: 80%;
  display: flex;
  align-items: center;
  justify-content: space-between; /* Adds space between the two text elements */
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
  border-bottom: 1px solid #ccc; /* Adds a thin gray line below */
  gap: 10px; /* Adds spacing between items, if necessary */
}

.uuid {
  font-size: 14px; /* Adjust text size */
  color: #333; /* Optional: Adjust text color */
}


<div className="show">
        <text class="uuid">Showing {data ? data.length : count} results </text>
        <text class="uuid">Showing {data ? data.length : count} results </text>
        <hr />
      </div>

.show {
    width: 80%;
    display: flex;
    align-items:center;
    justify-content: center; /* Centers the content horizontally */
    margin: 0 auto; /* Centers the container within the parent element horizontally */
    margin-bottom: 20px; /* Keeps the existing vertical spacing */
    border-bottom: 1px solid #ccc; /* Adds a thin gray line below */
    gap:10px;
}


function getData() {
        if (!selectedSchema) {
            alert("Please select a schema before searching.");
            return;
        }
        setLoading(true);
        setTerm(query);
        setSchema(selectedSchema);
        getDataAPI(query,selectedSchema).then((data) => {
            console.log(data);
            setData(data.data);
            setLoading(false);
        });

        getDataCountAPI(query,selectedSchema).then((data)){}
    }








app.get('/multi_word_count', async (req, res) => {
  const { term = '', schema } = req.query;

  try {
    // Split the term into words
    const words = term.split(/\s+/).filter(Boolean);

    if (words.length === 0) {
      return res.status(400).json({ error: 'Search term cannot be empty.' });
    }

    // Generate a unique cache key based on the search term and schema
    const cacheKey = `multi_word_count:${term}:schema:${schema}`;

    // Check if the result is already cached
    const cachedCount = cache.get(cacheKey);
    if (cachedCount !== undefined) {
      console.log('Serving count from cache');
      return res.json({ source: 'cache', totalCount: cachedCount });
    }

    // Construct search condition dynamically with :*
    const searchCondition = words
      .map((_, index) => `document_vector @@ to_tsquery('simple', $${index + 1} || ':*')`)
      .join(' AND ');

    // Prepare parameter values
    const values = words;

    console.log('Fetching total count from database');
    const countQuery = `
      SELECT COUNT(*) AS totalCount
      FROM ${schema}
      WHERE ${searchCondition};
    `;
    const { rows } = await pool.query(countQuery, values);

    const totalCount = parseInt(rows[0].totalcount, 10);

    // Cache the result for future requests
    cache.set(cacheKey, totalCount, 300); // Cache for 5 minutes (300 seconds)

    res.json({ source: 'database', totalCount });
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});





app.get('/multi_word_count', async (req, res) => {
  const { term = '', schema } = req.query;

  try {
    // Split the term into words
    const words = term.split(/\s+/).filter(Boolean);

    if (words.length === 0) {
      return res.status(400).json({ error: 'Search term cannot be empty.' });
    }

    // Construct search condition dynamically with :*
    const searchCondition = words
      .map((_, index) => `document_vector @@ to_tsquery('simple', $${index + 1} || ':*')`)
      .join(' AND ');

    // Prepare parameter values
    const values = words;

    console.log('Fetching total count from database');
    const countQuery = `
      SELECT COUNT(*) AS totalCount
      FROM ${schema}
      WHERE ${searchCondition};
    `;
    const countResult = await pool.query(countQuery, values);

    const totalCount = parseInt(countResult.rows[0].totalcount, 10);
    res.json({ totalCount });
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});



app.get('/multi_word_search', async (req, res) => {
  const { term = '', page = 1, limit = 100, schema } = req.query;
  const offset = (page - 1) * limit;

  // Create a unique cache key based on query parameters
  const cacheKey = `multi_search:${term}:page:${page}:limit:${limit}:schema:${schema}`;

  try {
    // Check if the result is already in the cache
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log('Serving from cache');
      return res.json({ source: 'cache', count: cachedData.length, data: cachedData });
    }

    // Split the term into words
    const words = term.split(/\s+/).filter(Boolean);

    if (words.length === 0) {
      return res.status(400).json({ error: 'Search term cannot be empty.' });
    }

    // Construct search condition dynamically with :*
    const searchCondition = words
      .map((_, index) => `document_vector @@ to_tsquery('simple', $${index + 1} || ':*')`)
      .join(' AND ');

    // Prepare parameter values
    const values = [...words, parseInt(limit), parseInt(offset)];

    console.log('Fetching paginated data from database');
    const dataQuery = `
      SELECT data
      FROM ${schema}
      WHERE ${searchCondition}
      LIMIT $${words.length + 1} OFFSET $${words.length + 2};
    `;
    const dataResult = await pool.query(dataQuery, values);

    // Cache the result for future requests
    cache.set(cacheKey, dataResult.rows);

    res.json({ source: 'database', count: dataResult.rows.length, data: dataResult.rows });
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});

0000000000000


app.get('/multi_word_search1', async (req, res) => {
  const { term = '', page = 1, limit = 100, schema } = req.query;
  const offset = (page - 1) * limit;

  // Create a unique cache key based on query parameters
  const cacheKey = `multi_search:${term}:page:${page}:limit:${limit}:schema:${schema}`;

  try {
    // Check if the result is already in the cache
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log('Serving from cache');
      return res.json({
        source: 'cache',
        highlight: term,
        totalCount: cachedData.totalCount,
        count: cachedData.data.length,
        data: cachedData.data,
      });
    }

    // Split the term into words
    const words = term.split(/\s+/).filter(Boolean); // Split by spaces and remove empty strings

    if (words.length === 0) {
      return res.status(400).json({ error: 'Search term cannot be empty.' });
    }

    // Construct search query dynamically with :*
    const searchCondition = words
      .map((_, index) => `document_vector @@ to_tsquery('simple', $${index + 1} || ':*')`)
      .join(' AND ');

    // Prepare parameter values
    const values = [...words, parseInt(limit), parseInt(offset)];

    console.log('Fetching from database');

    // Query for total count
    const countQuery = `
      SELECT COUNT(*) AS totalCount
      FROM ${schema}
      WHERE ${searchCondition};
    `;
    const countResult = await pool.query(countQuery, words);
    const totalCount = parseInt(countResult.rows[0].totalcount, 10);

    // Query for paginated data
    const dataQuery = `
      SELECT data
      FROM ${schema}
      WHERE ${searchCondition}
      LIMIT $${words.length + 1} OFFSET $${words.length + 2};
    `;
    const dataResult = await pool.query(dataQuery, values);

    const response = {
      source: 'database',
      highlight: term,
      totalCount,
      count: dataResult.rows.length,
      data: dataResult.rows,
    };

    // Store the result in cache
    cache.set(cacheKey, response);

    res.json(response);
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});





///
app.get('/multi_word_search1', async (req, res) => {
  const { term = '', page = 1, limit = 100, schema } = req.query;
  const offset = (page - 1) * limit;

  // Create a unique cache key based on query parameters
  const cacheKey = `multi_search:${term}:page:${page}:limit:${limit}:schema:${schema}`;

  try {
    // Check if the result is already in the cache
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log('Serving from cache');
      return res.json({ source: 'cache', highlight: term, count: cachedData.length, data: cachedData });
    }

    // Split the term into words
    const words = term.split(/\s+/).filter(Boolean); // Split by spaces and remove empty strings

    if (words.length === 0) {
      return res.status(400).json({ error: 'Search term cannot be empty.' });
    }

    // Construct search query dynamically with :*
    const searchQuery = words
      .map((_, index) => `document_vector @@ to_tsquery('simple', $${index + 1} || ':*')`)
      .join(' AND ');

    const query = `
      SELECT data
      FROM ${schema}
      WHERE ${searchQuery}
      LIMIT $${words.length + 1} OFFSET $${words.length + 2};
    `;

    // Prepare parameter values
    const values = [...words, parseInt(limit), parseInt(offset)];

    console.log('Fetching from database');
    const { rows } = await pool.query(query, values);

    // Store the result in cache
    cache.set(cacheKey, rows);

    res.json({ source: 'database', highlight: term, count: rows.length, data: rows });
  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});





hu.search {
	width: 100%;
	outline: none;
	border: none;
	margin-bottom: 2%;
	height: 50px;
	border-radius: 5px;
}
.search-container {
	position: relative;
	width: 100%;
	margin-bottom: 10px;
}
.search-input {
	width: 100%;
	padding: 10px 10px 10px 40px;
	box-sizing: border-box;
	border: none;
	border-radius: 7px;
	height: 50px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}
.search-icon {
	position: absolute;
	top: 50%;
	left: 10px;
	transform: translateY(-50%);
	font-size: 20px;
	color: #888;
	pointer-events: none;
}


import {useState} from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from '@mui/material/Box';
import LinearProgress from '@mui/material/LinearProgress';

function SearchQuery({setData,SetTerm}) {

    const [query,setQuery] = useState("");
    const [loading,setLoading] = useState(false);

    function getData(){  
        setLoading(true);
        SetTerm(query);
        const data = getDataAPI(query).then(data => {
            console.log(data);
            setData(data.data);
            setLoading(false);
        });     

    }

    return(
        <div className="search-container">
       
        <SearchBar
            className="search-input"         
            value={query}
            onChange={e =>setQuery(e)}
            onRequestSearch={() => getData()}
            placeholder="Want to search something ?"
        /> 
        {loading && <Box sx={{ width: '100%' }}><LinearProgress /></Box>}           
        
        </div>
    );
}
export default SearchQuery;



.search-container {
  position: relative;
  width: 100%;
  margin-bottom: 20px;
}

.search-input {
  width: 100%;
  padding: 10px 10px 10px 40px;
  box-sizing: border-box;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}

.search-icon {
  position: absolute;
  top: 50%;
  left: 10px;
  transform: translateY(-50%);
  font-size: 20px;
  color: #888;
  pointer-events: none;
}

.select-dropdown {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 7px;
  margin-bottom: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  font-size: 16px;
  appearance: none;
}





import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm({ query, schema: selectedSchema });
    getDataAPI({ query, schema: selectedSchema }).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;


.search-container {
  display: flex;
  align-items: center;
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 100%;
  margin-bottom: 20px;
}

.select-dropdown {
  flex: 1; /* Adjusts size proportionally */
  height: 50px;
  padding: 10px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  font-size: 16px;
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}


import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm({ query, schema: selectedSchema });
    getDataAPI({ query, schema: selectedSchema }).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;



.search-container {
	display: flex;
	align-items: center;
	align-content: center;
	gap: 10px; /* Spacing between dropdown and search bar */
	width: 80%;
	margin-bottom: 20px;
  }
  
  .select-dropdown {
	flex: 3; /* Adjusts size proportionally */
	height: 68px;
	padding: 10px 10px 10px 40px;
	border: none;
	border-radius: 7px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);

	appearance: none;
  }
  
  .search-input {
	flex: 3; /* Adjusts size proportionally */
	padding: 10px 10px 10px 40px;
	border: none;
	border-radius: 7px;
	height: 50px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  }


.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers horizontally within the parent container */
  position: absolute; /* Enables centering on the viewport */
  top: 50%; /* Vertically centers */
  left: 50%; /* Horizontally centers */
  transform: translate(-50%, -50%); /* Adjusts position to the center */
}

.select-dropdown {
  flex: 3; /* Adjusts size proportionally */
  height: 68px;
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}



.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers the content horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
}

.select-dropdown {
  flex: 3; /* Adjusts size proportionally */
  height: 68px;
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  appearance: none;
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 10px 10px 10px 40px;
  border: none;
  border-radius: 7px;
  height: 50px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}


.show{
    width: 80%;
    display: flex;
	align-items: center;
	justify-content: center; /* Centers the content horizontally */
    margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
    border-bottom: 1;
    border-bottom-width: 1;
  }


.show {
    width: 80%;
    display: flex;
    align-items: center;
    justify-content: center; /* Centers the content horizontally */
    margin: 0 auto; /* Centers the container within the parent element horizontally */
    margin-bottom: 20px; /* Keeps the existing vertical spacing */
    border-bottom: 1px solid #ccc; /* Adds a thin gray line below */
}



<Card
      variant="outlined"
      style={{
        marginBottom: "20px",
        border: "1px solid #ddd",
        boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
        borderRadius: "10px",
        width:'80%',
        
      
      }}
    >


<Card
  variant="outlined"
  style={{
    marginBottom: "20px",
    border: "1px solid #ddd",
    boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
    borderRadius: "10px",
    width: "80%",
    margin: "0 auto", // Centers the Card horizontally
  }}
>
  {/* Card content goes here */}
</Card>


###########################################################################################################################


.search-container {
	display: flex;
	align-items: center;
	justify-content: center; /* Centers the content horizontally */
	gap: 10px; /* Spacing between dropdown and search bar */
	width: 80%;
	margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
	
  }
  
  .select-dropdown {
	flex: 3; /* Adjusts size proportionally */
	height: 48px;
	padding: 0px 0px 0px 0px;
	border: none;
	border-radius: 7px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
	appearance: none;
  }
  
  .search-input {
	flex: 3; /* Adjusts size proportionally */
	padding: 0px 0px 0px 0px;
	border: none;
	border-radius: 7px;
	
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  }

  .line{
	position: relative;
	width: 80%;
	margin-bottom: 10px;
	margin: 0 auto; /* Centers the container within the parent element horizontally */
	margin-bottom: 20px; /* Keeps the existing vertical spacing */
  }



import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Schema 1", value: "schema1" },
    { label: "Schema 2", value: "schema2" },
    { label: "Schema 3", value: "schema3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm(query);
    getDataAPI(query).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="line">
    <div className="search-container">
      {/* Schema Dropdown */}
      <select
        className="select-dropdown"
        value={selectedSchema}
        onChange={(e) => setSelectedSchema(e.target.value)}
      >
        <option value="">Select Schema</option>
        {schemaOptions.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* Search Bar */}
      <SearchBar
        className="search-input"
        value={query}
        onChange={(e) => setQuery(e)}
        onRequestSearch={() => getData()}
        placeholder="Want to search something?"
      />

      
    </div>

    {/* Loading Indicator */}
    {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
      </div>
  );
}

export default SearchQuery;




.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers the content horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 0px 10px; /* Added padding for better spacing */
  border: none;
  border-radius: 7px;
  height: 48px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}

.material-dropdown {
  flex: 3;
  height: 48px;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  padding: 0 10px;
}



import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";
import MenuItem from "@mui/material/MenuItem";
import Select from "@mui/material/Select";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(""); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Option One", value: "option1" },
    { label: "Option Two", value: "option2" },
    { label: "Another Schema Option", value: "option3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm(query);
    getDataAPI(query).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="line">
      <div className="search-container">
        {/* Material-UI Dropdown */}
        <FormControl
          style={{
            flex: 3,
            marginBottom: 0,
            boxShadow: "0 4px 8px 0 rgba(0, 0, 0, 0.2)",
            borderRadius: "7px",
          }}
          variant="outlined"
        >
          <InputLabel id="schema-select-label">Select Schema</InputLabel>
          <Select
            labelId="schema-select-label"
            id="schema-select"
            value={selectedSchema}
            onChange={(e) => setSelectedSchema(e.target.value)}
            className="material-dropdown"
            displayEmpty
            style={{
              padding: "0 10px",
              height: "48px",
              borderRadius: "7px",
              boxShadow: "0 4px 8px 0 rgba(0, 0, 0, 0.2)",
            }}
          >
            <MenuItem value="">
              <em>Select Schema</em>
            </MenuItem>
            {schemaOptions.map((option) => (
              <MenuItem key={option.value} value={option.value}>
                {option.label}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        {/* Search Bar */}
        <SearchBar
          className="search-input"
          value={query}
          onChange={(e) => setQuery(e)}
          onRequestSearch={() => getData()}
          placeholder="Want to search something?"
        />
      </div>

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;

.search-container {
  display: flex;
  align-items: center;
  justify-content: center; /* Centers the content horizontally */
  gap: 10px; /* Spacing between dropdown and search bar */
  width: 80%;
  margin: 0 auto; /* Centers the container within the parent element horizontally */
  margin-bottom: 20px; /* Keeps the existing vertical spacing */
}

.search-input {
  flex: 3; /* Adjusts size proportionally */
  padding: 0px 10px; /* Added padding for better spacing */
  border: none;
  border-radius: 7px;
  height: 48px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}

.autocomplete-dropdown {
  flex: 3; /* Adjusts size proportionally */
  height: 48px;
  border-radius: 7px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
}






import { useState } from "react";
import { getDataAPI } from "../../services/httpServices";
import SearchBar from "material-ui-search-bar";
import "./SearchQuery.scss";
import Box from "@mui/material/Box";
import LinearProgress from "@mui/material/LinearProgress";
import Autocomplete from "@mui/material/Autocomplete";
import TextField from "@mui/material/TextField";

function SearchQuery({ setData, SetTerm }) {
  const [query, setQuery] = useState("");
  const [selectedSchema, setSelectedSchema] = useState(null); // For schema selection
  const [loading, setLoading] = useState(false);

  const schemaOptions = [
    { label: "Option One", value: "option1" },
    { label: "Option Two", value: "option2" },
    { label: "Another Schema Option", value: "option3" },
  ]; // Example schema options

  function getData() {
    if (!selectedSchema) {
      alert("Please select a schema before searching.");
      return;
    }
    setLoading(true);
    SetTerm(query);
    getDataAPI(query).then((data) => {
      console.log(data);
      setData(data.data);
      setLoading(false);
    });
  }

  return (
    <div className="line">
      <div className="search-container">
        {/* Autocomplete Dropdown */}
        <Autocomplete
          options={schemaOptions}
          getOptionLabel={(option) => option.label}
          value={selectedSchema}
          onChange={(event, newValue) => setSelectedSchema(newValue)}
          renderInput={(params) => (
            <TextField
              {...params}
              placeholder="Search and select schema"
              variant="outlined"
              style={{
                height: "48px", // Set dropdown height
                borderRadius: "7px",
              }}
            />
          )}
          className="autocomplete-dropdown"
          style={{
            flex: 3,
          }}
        />

        {/* Search Bar */}
        <SearchBar
          className="search-input"
          value={query}
          onChange={(e) => setQuery(e)}
          onRequestSearch={() => getData()}
          placeholder="Want to search something?"
        />
      </div>

      {/* Loading Indicator */}
      {loading && (
        <Box sx={{ width: "100%", marginTop: "10px" }}>
          <LinearProgress />
        </Box>
      )}
    </div>
  );
}

export default SearchQuery;


<Autocomplete
  options={schemaOptions}
  getOptionLabel={(option) => option.label}
  value={selectedSchema}
  onChange={(event, newValue) => setSelectedSchema(newValue)}
  renderInput={(params) => (
    <TextField
      {...params}
      placeholder="Search and select schema"
      variant="outlined"
      style={{
        height: "48px",
        borderRadius: "7px",
      }}
    />
  )}
  className="autocomplete-dropdown"
  sx={{
    ".MuiOutlinedInput-root": {
      padding: 0, // Remove padding
    },
  }}
  style={{
    flex: 3,
  }}
/>



const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;

    const regex = new RegExp(`(${searchTerm})`, "gi");
    const parts = text.split(regex);

    return parts.map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
        
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };

const escapeRegExp = (string) => {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // Escapes special characters for regex
};

const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const escapedSearchTerm = escapeRegExp(searchTerm); // Escape special characters
  const regex = new RegExp(`(${escapedSearchTerm})`, "gi"); // Create a case-insensitive regex
  const parts = text.split(regex);

  return parts.map((part, index) =>
    regex.test(part) ? (
      <span
        key={index}
        style={{
          backgroundColor: "#ffe58a",
          fontWeight: "bold",
        }}
      >
        {part}
      </span>
    ) : (
      part
    )
  );
};



const escapeRegExp = (string) => {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // Escapes special characters for regex
};

const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const escapedSearchTerm = escapeRegExp(searchTerm); // Escape special characters
  const regex = new RegExp(`(${escapedSearchTerm})`, "gi"); // Case-insensitive regex
  const parts = text.split(regex);

  return parts.map((part, index) => {
    // Highlight the part if it matches the searchTerm
    if (part.match(regex)) {
      return (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
          }}
        >
          {part}
        </span>
      );
    }
    // Return non-matching parts as plain text
    return part;
  });
};

