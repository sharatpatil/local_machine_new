
  Line 173:39:  React Hook "useState" cannot be called inside a callback. React Hooks must be called in a React function 
component or a custom React Hook function  react-hooks/rules-of-hooks


import React, { useState } from "react";
import {
  Modal,
  Box,
  IconButton,
  Typography,
  Tooltip,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";

function JsonModal({ modalOpen, setModalOpen, item }) {
  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(item, null, 2));
    alert("JSON copied to clipboard!");
  };

  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(item, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "domain-json.json";
    link.click();
  };

  // Recursive Tree Rendering
  const renderTree = (data) => {
    return Object.entries(data).map(([key, value], index) => {
      const [expanded, setExpanded] = useState(false);

      const isExpandable = typeof value === "object" && value !== null;

      return (
        <Box key={`${key}-${index}`} sx={{ ml: 2, mt: 1 }}>
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              cursor: isExpandable ? "pointer" : "default",
            }}
            onClick={() => isExpandable && setExpanded(!expanded)}
          >
            {isExpandable ? (
              expanded ? (
                <ExpandMoreIcon sx={{ fontSize: 16, mr: 1 }} />
              ) : (
                <ChevronRightIcon sx={{ fontSize: 16, mr: 1 }} />
              )
            ) : (
              <Box sx={{ width: 16, mr: 1 }} />
            )}
            <Typography
              component="span"
              sx={{
                fontWeight: isExpandable ? "bold" : "normal",
                color: isExpandable ? "#3f51b5" : "#000",
              }}
            >
              {key}:
            </Typography>
            {!isExpandable && (
              <Typography
                component="span"
                sx={{ ml: 1, color: "gray", fontFamily: "monospace" }}
              >
                {String(value)}
              </Typography>
            )}
          </Box>
          {isExpandable && expanded && (
            <Box sx={{ ml: 2 }}>{renderTree(value)}</Box>
          )}
        </Box>
      );
    });
  };

  return (
    <Modal
      open={modalOpen}
      onClose={() => setModalOpen(false)}
      aria-labelledby="json-modal"
      aria-describedby="json-modal-description"
    >
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "600px",
          bgcolor: "background.paper",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: 24,
          p: 4,
          maxHeight: "80%",
          overflowY: "auto",
        }}
      >
        {/* Modal Header */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ color: "#3f51b5" }}
          >
            Domain JSON Viewer
          </Typography>
          <Box>
            <Tooltip title="Copy JSON">
              <IconButton onClick={handleCopy}>
                <ContentCopyIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download JSON">
              <IconButton onClick={handleDownload}>
                <FileDownloadIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Close">
              <IconButton onClick={() => setModalOpen(false)}>
                <CloseIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* Custom Tree Viewer */}
        <Box
          sx={{
            bgcolor: "#f5f5f5",
            padding: "10px",
            borderRadius: "5px",
            maxHeight: "400px",
            overflowY: "auto",
            border: "1px solid #ddd",
          }}
        >
          {renderTree(item)}
        </Box>
      </Box>
    </Modal>
  );
}

export default JsonModal;


///////////////////////////////////////////////////////////


import React from "react";
import {
  Modal,
  Box,
  IconButton,
  Typography,
  Tooltip,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import { TreeView, TreeItem } from "@mui/x-tree-view";

function JsonModal({ modalOpen, setModalOpen, item }) {
  // Recursive function to render Tree Items
  const renderTree = (data, parentId = "root") => {
    return Object.keys(data).map((key, index) => {
      const value = data[key];
      const id = `${parentId}-${key}-${index}`; // Generate unique `id`

      if (typeof value === "object" && value !== null) {
        // Render nested objects or arrays
        return (
          <TreeItem key={id} id={id} nodeId={id} label={key}>
            {renderTree(value, id)}
          </TreeItem>
        );
      }

      // Render leaf node for primitive values
      return (
        <TreeItem
          key={id}
          id={id}
          nodeId={id}
          label={`${key}: ${value}`}
        />
      );
    });
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(item, null, 2));
    alert("JSON copied to clipboard!");
  };

  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(item, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "domain-json.json";
    link.click();
  };

  return (
    <Modal
      open={modalOpen}
      onClose={() => setModalOpen(false)}
      aria-labelledby="json-modal"
      aria-describedby="json-modal-description"
    >
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "600px",
          bgcolor: "background.paper",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: 24,
          p: 4,
          maxHeight: "80%",
          overflowY: "auto",
        }}
      >
        {/* Modal Header */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ color: "#3f51b5" }}
          >
            Domain JSON Viewer
          </Typography>
          <Box>
            <Tooltip title="Copy JSON">
              <IconButton onClick={handleCopy}>
                <ContentCopyIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download JSON">
              <IconButton onClick={handleDownload}>
                <FileDownloadIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Close">
              <IconButton onClick={() => setModalOpen(false)}>
                <CloseIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* TreeView Content */}
        <Box
          sx={{
            bgcolor: "#f5f5f5",
            padding: "10px",
            borderRadius: "5px",
            maxHeight: "400px",
            overflowY: "auto",
            border: "1px solid #ddd",
          }}
        >
          <TreeView
            defaultCollapseIcon={<CloseIcon />}
            defaultExpandIcon={<FileDownloadIcon />}
            sx={{
              flexGrow: 1,
              overflowY: "auto",
              fontFamily: "monospace",
              fontSize: "14px",
            }}
          >
            {renderTree(item)}
          </TreeView>
        </Box>
      </Box>
    </Modal>
  );
}

export default JsonModal;

////////////////////////////////////////////////////////


import React from "react";
import {
  Modal,
  Box,
  IconButton,
  Typography,
  Tooltip,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import { TreeView, TreeItem } from "@mui/lab";

function JsonModal({ modalOpen, setModalOpen, item }) {
  // Function to recursively render JSON as Tree Items
  const renderTree = (data, nodeId = "root") => {
    return Object.keys(data).map((key, index) => {
      const value = data[key];
      const currentNodeId = `${nodeId}-${key}-${index}`; // Generate unique nodeId

      if (typeof value === "object" && value !== null) {
        return (
          <TreeItem key={currentNodeId} nodeId={currentNodeId} label={key}>
            {renderTree(value, currentNodeId)}
          </TreeItem>
        );
      }

      return (
        <TreeItem
          key={currentNodeId}
          nodeId={currentNodeId}
          label={`${key}: ${value}`}
        />
      );
    });
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(item, null, 2));
    alert("JSON copied to clipboard!");
  };

  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(item, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "domain-json.json";
    link.click();
  };

  return (
    <Modal
      open={modalOpen}
      onClose={() => setModalOpen(false)}
      aria-labelledby="json-modal"
      aria-describedby="json-modal-description"
    >
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "600px",
          bgcolor: "background.paper",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: 24,
          p: 4,
          maxHeight: "80%",
          overflowY: "auto",
        }}
      >
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ color: "#3f51b5" }}
          >
            Domain JSON Viewer
          </Typography>
          <Box>
            <Tooltip title="Copy JSON">
              <IconButton onClick={handleCopy}>
                <ContentCopyIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download JSON">
              <IconButton onClick={handleDownload}>
                <FileDownloadIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Close">
              <IconButton onClick={() => setModalOpen(false)}>
                <CloseIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* TreeView Content */}
        <Box
          sx={{
            bgcolor: "#f5f5f5",
            padding: "10px",
            borderRadius: "5px",
            maxHeight: "400px",
            overflowY: "auto",
            border: "1px solid #ddd",
          }}
        >
          <TreeView
            defaultCollapseIcon={<CloseIcon />}
            defaultExpandIcon={<FileDownloadIcon />}
            sx={{
              flexGrow: 1,
              overflowY: "auto",
              fontFamily: "monospace",
              fontSize: "14px",
            }}
          >
            {renderTree(item)}
          </TreeView>
        </Box>
      </Box>
    </Modal>
  );
}

export default JsonModal;

//////////////////////////////////////////////////////////////



MUI X: The Tree View component requires all items to have a unique `id` property.
Alternatively, you can use the `getItemId` prop to specify a custom id for each item.
Two items were provided with the same id in the `items` prop: "undefined"
Error: MUI X: The Tree View component requires all items to have a unique `id` property.
Alternatively, you can use the `getItemId` prop to specify a custom id for each item.
Two items were provided with the same id in the `items` prop: "undefined"



import React from "react";
import {
  Modal,
  Box,
  IconButton,
  Typography,
  Tooltip,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import { TreeView, TreeItem } from "@mui/lab";

function JsonModal({ modalOpen, setModalOpen, renderJSON, item }) {
  // Function to recursively render JSON as Tree Items
  const renderTree = (data, nodeId = "root") => {
    return Object.keys(data).map((key, index) => {
      const value = data[key];
      const currentNodeId = `${nodeId}-${index}`;

      if (typeof value === "object" && value !== null) {
        // Render as nested TreeItem if value is an object or array
        return (
          <TreeItem key={currentNodeId} nodeId={currentNodeId} label={key}>
            {renderTree(value, currentNodeId)}
          </TreeItem>
        );
      }

      // Render as a single TreeItem for primitive values
      return (
        <TreeItem
          key={currentNodeId}
          nodeId={currentNodeId}
          label={`${key}: ${value}`}
        />
      );
    });
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(item, null, 2));
    alert("JSON copied to clipboard!");
  };

  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(item, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "domain-json.json";
    link.click();
  };

  return (
    <Modal
      open={modalOpen}
      onClose={() => setModalOpen(false)}
      aria-labelledby="json-modal"
      aria-describedby="json-modal-description"
    >
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "600px",
          bgcolor: "background.paper",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: 24,
          p: 4,
          maxHeight: "80%",
          overflowY: "auto",
        }}
      >
        {/* Top Bar with Close, Copy, and Download Buttons */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ color: "#3f51b5" }}
          >
            Domain JSON Viewer
          </Typography>
          <Box>
            <Tooltip title="Copy JSON">
              <IconButton onClick={handleCopy}>
                <ContentCopyIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download JSON">
              <IconButton onClick={handleDownload}>
                <FileDownloadIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Close">
              <IconButton onClick={() => setModalOpen(false)}>
                <CloseIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* TreeView Content */}
        <Box
          sx={{
            bgcolor: "#f5f5f5",
            padding: "10px",
            borderRadius: "5px",
            maxHeight: "400px",
            overflowY: "auto",
            border: "1px solid #ddd",
          }}
        >
          <TreeView
            defaultCollapseIcon={<CloseIcon />}
            defaultExpandIcon={<FileDownloadIcon />}
            sx={{
              flexGrow: 1,
              overflowY: "auto",
              fontFamily: "monospace",
              fontSize: "14px",
            }}
          >
            {renderTree(item)}
          </TreeView>
        </Box>
      </Box>
    </Modal>
  );
}

export default JsonModal;

////////////////////////////////////////////////////////////////////


import React from "react";
import { Modal, Box, IconButton, Typography, Tooltip } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";

function JsonModal({ modalOpen, setModalOpen, renderJSON, item }) {
  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(item, null, 2));
    alert("JSON copied to clipboard!");
  };

  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(item, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "domain-json.json";
    link.click();
  };

  return (
    <Modal
      open={modalOpen}
      onClose={() => setModalOpen(false)}
      aria-labelledby="json-modal"
      aria-describedby="json-modal-description"
    >
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "600px",
          bgcolor: "background.paper",
          border: "1px solid #ddd",
          borderRadius: "10px",
          boxShadow: 24,
          p: 4,
          maxHeight: "80%",
          overflowY: "auto",
        }}
      >
        {/* Top Bar with Close, Copy, and Download Buttons */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ color: "#3f51b5" }}
          >
            Domain JSON Viewer
          </Typography>
          <Box>
            <Tooltip title="Copy JSON">
              <IconButton onClick={handleCopy}>
                <ContentCopyIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download JSON">
              <IconButton onClick={handleDownload}>
                <FileDownloadIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
            <Tooltip title="Close">
              <IconButton onClick={() => setModalOpen(false)}>
                <CloseIcon sx={{ color: "#3f51b5" }} />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>

        {/* JSON Rendered Content */}
        <Box
          sx={{
            bgcolor: "#f5f5f5",
            padding: "10px",
            borderRadius: "5px",
            maxHeight: "400px",
            overflowY: "auto",
            border: "1px solid #ddd",
          }}
        >
          <pre style={{ fontFamily: "monospace", fontSize: "14px" }}>
            {JSON.stringify(item, null, 2)}
          </pre>
        </Box>
      </Box>
    </Modal>
  );
}

export default JsonModal;
//////////////////////////////
      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        aria-labelledby="json-modal"
        aria-describedby="json-modal-description"
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "600px",
            bgcolor: "background.paper",
            border: "1px solid #ddd",
            borderRadius: "10px",
            boxShadow: 24,
            p: 4,
            maxHeight: "80%",
            overflowY: "auto",
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ textAlign: "center", marginBottom: "20px", color: "#3f51b5" }}
          >
            JSON Viewer
          </Typography>

          <TextField
            fullWidth
            variant="outlined"
            size="small"
            label="Filter JSON"
            value={filterText}
            onChange={(e) => setFilterText(e.target.value)}
            sx={{
              marginBottom: "20px",
            }}
          />

          {/* <RichTreeView
            defaultCollapseIcon={<ExpandMoreIcon />}
            defaultExpandIcon={<ChevronRightIcon />}
            sx={{ flexGrow: 1, overflowY: "auto" }}
          > */}
            {renderJSON(item)}
          {/* </RichTreeView> */}

          <Box sx={{ textAlign: "center", marginTop: "20px" }}>
            <button
              onClick={() => setModalOpen(false)}
              style={{
                backgroundColor: "#3f51b5",
                color: "#fff",
                padding: "10px 20px",
                border: "none",
                borderRadius: "5px",
                cursor: "pointer",
              }}
            >
              Close
            </button>
          </Box>
        </Box>
      </Modal>








.icon-button-right {
  margin-left: auto; /* Pushes the button to the far right */
  display: flex;     /* Ensures alignment if used in a flex container */
  align-items: center;
}



<IconButton >
            <VisibilityIcon sx={{ color: "grey" , }} />
      </IconButton>


import './Navbar.scss';
import 'font-awesome/css/font-awesome.min.css';
import PolicyIcon from '@mui/icons-material/Policy';

function Navbar() {
  return (
    <div className="navBar">
      <div />
      <img className="logo" src="Images/sc-logo.svg" alt="Logo" />
      <div className="bpsi">
        <span className="bpsi-text">BPSI</span>
        <span className="bpsi-title">Smart</span>
        <PolicyIcon className="bpsi-icon" />
      </div>
      <div className="user">
        <span className="user-icon">
          {/* <i className="fas fa-user" /> */}
          <div className="user-name">BPSI Team</div>
        </span>
      </div>
    </div>
  );
}

export default Navbar;



@use '../../Colors.scss' as c;

.navBar {
  height: 60px;
  width: 100%;
  background-image: linear-gradient(to right, #00008B, #0096FF);
  display: flex;
  align-items: center;
}

.logo {
  margin-left: 20px;
  margin-right: 20px;
  margin-top: 10px;
  margin-bottom: 10px;
}

.bpsi {
  display: flex;
  align-items: center; /* Align icon and text vertically */
  color: #0FFF50;
  margin-top: 10px;
  margin-left: 20px;
  flex-grow: 1; /* Push the "user" section to the right */
}

.bpsi-text {
  font-size: medium;
  margin-right: 5px;
}

.bpsi-title {
  font-size: bold;
  color: #fff;
  margin-right: 5px;
}

.bpsi-icon {
  color: #fff;
  font-size: 20px; /* Adjust the icon size to match text */
}

.user {
  display: flex;
  align-items: center; /* Align "user" section items vertically */
  float: right;
  margin-left: 20px;
  margin-right: 20px;
}

.user-name {
  color: white;
  font-size: medium;
}

.user-icon {
  font-size: 20px;
  margin-right: 10px;
  color: white;
}


////////////////////

<div className="bpsi">BPSI  <text className="bpsi-title">Smart  </text>  <PolicyIcon  /></div> 

const getHighlightedData = (obj) => {
  const result = [];
  const searchWords = searchTerm
    ?.toLowerCase()
    .trim()
    .split(/\s+/); // Split the search term into individual words

  if (!searchWords || searchWords.length === 0) return result;

  Object.entries(obj).forEach(([key, value]) => {
    const isNestedObject = typeof value === "object" && value !== null;

    // Ensure the key and value are strings for comparison
    const keyString = key?.toLowerCase() || ""; // Fallback to empty string if undefined
    const valueString = value?.toString().toLowerCase() || ""; // Fallback to empty string if undefined

    // Check if any search word matches the key or value
    const keyMatches = searchWords.some((word) => keyString.includes(word));
    const valueMatches = searchWords.some((word) => valueString.includes(word));

    if (isNestedObject) {
      // Recursively process nested objects
      result.push(...getHighlightedData(value));
    } else if (keyMatches || valueMatches) {
      // Add matches to the result
      result.push({ key, value });
    }
  });

  return result;
};






const getHighlightedData = (obj) => {
  const result = [];
  const searchWords = searchTerm
    ?.toLowerCase()
    .trim()
    .split(/\s+/); // Ensure even a single word becomes an array

  if (!searchWords || searchWords.length === 0) return result;

  Object.entries(obj).forEach(([key, value]) => {
    const isNestedObject = typeof value === "object" && value !== null;

    // Convert to strings for comparison and handle numbers
    const keyString = key.toLowerCase();
    const valueString = value?.toString().toLowerCase();

    const keyMatches = searchWords.some((word) => keyString.includes(word));
    const valueMatches = searchWords.some((word) =>
      valueString.includes(word)
    );

    if (isNestedObject) {
      // Recursively check nested objects
      result.push(...getHighlightedData(value));
    } else if (keyMatches || valueMatches) {
      // Push matches to the result array
      result.push({ key, value });
    }
  });

  return result;
};








const getHighlightedData = (obj) => {
  const result = [];
  const searchWords = searchTerm
    ?.toLowerCase()
    .trim()
    .split(/\s+/); // Ensure even a single word becomes an array

  if (!searchWords || searchWords.length === 0) return result;

  Object.entries(obj).forEach(([key, value]) => {
    const isNestedObject = typeof value === "object" && value !== null;

    const keyMatches = searchWords.some((word) =>
      key.toLowerCase().includes(word)
    );

    const valueMatches =
      typeof value === "string" &&
      searchWords.some((word) => value.toLowerCase().includes(word));

    if (isNestedObject) {
      // Recursively check nested objects
      result.push(...getHighlightedData(value));
    } else if (keyMatches || valueMatches) {
      // Push matches to the result array
      result.push({ key, value });
    }
  });

  return result;
};




const getHighlightedData = (obj) => {
  const result = [];
  const searchWords = searchTerm
    ?.toLowerCase()
    .trim()
    .split(/\s+/); // Split search term into individual words

  if (!searchWords || searchWords.length === 0) return result;

  Object.entries(obj).forEach(([key, value]) => {
    const isNestedObject = typeof value === "object" && value !== null;
    const keyMatches = searchWords.some((word) =>
      key.toLowerCase().includes(word)
    );
    const valueMatches =
      typeof value === "string" &&
      searchWords.some((word) => value.toLowerCase().includes(word));

    if (isNestedObject) {
      // Recursively get matches for nested objects
      result.push(...getHighlightedData(value));
    } else if (keyMatches || valueMatches) {
      // Push matches to the result
      result.push({ key, value });
    }
  });

  return result;
};

// Highlighted Data
const highlightedData = getHighlightedData(item);


<Typography
  variant="h10"
  style={{
    color: "#333",
    fontSize: 14,
  }}
>
  {highlightedData.length > 0 ? (
    highlightedData.map(({ key, value }, index) => (
      <span key={index}>
        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
        <br />
      </span>
    ))
  ) : (
    <span>No matches found</span>
  )}
</Typography>






  const getHighlightedData = (obj) => {
  const result = [];
  const searchWords = searchTerm
    ?.toLowerCase()
    .trim()
    .split(/\s+/); // Split search term into individual words

  if (!searchWords || searchWords.length === 0) return result;

  Object.entries(obj).forEach(([key, value]) => {
    const isNestedObject = typeof value === "object" && value !== null;
    const keyMatches = searchWords.some((word) =>
      key.toLowerCase().includes(word)
    );
    const valueMatches =
      typeof value === "string" &&
      searchWords.some((word) => value.toLowerCase().includes(word));

    if (isNestedObject) {
      // Recursively get matches for nested objects
      result.push(...getHighlightedData(value));
    } else if (keyMatches || valueMatches) {
      // Push matches to the result
      result.push({ key, value });
    }
  });

  return result;
};

// Highlighted Data
const highlightedData = getHighlightedData(item)const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const highlightedData = getHighlightedData(item);






const getHighlightedData = (obj) => {
  const result = [];
  const escapedSearchTerm = escapeRegExp(searchTerm.trim().toLowerCase());
  const searchRegex = new RegExp(escapedSearchTerm, "gi");

  Object.entries(obj).forEach(([key, value]) => {
    if (typeof value === "object" && value !== null) {
      result.push(...getHighlightedData(value));
    } else {
      const keyMatches = searchRegex.test(key.toLowerCase());
      const valueMatches =
        typeof value === "string" && searchRegex.test(value.toLowerCase());

      if (keyMatches || valueMatches) {
        result.push({ key, value });
      }
    }
  });

  return result;
};

const highlightText = (text) => {
  if (!searchTerm || typeof text !== "string") return text;

  const escapedSearchTerm = escapeRegExp(searchTerm.trim());
  const regex = new RegExp(`(${escapedSearchTerm})`, "gi");

  const parts = text.split(regex);

  return parts.map((part, index) =>
    regex.test(part) ? (
      <span
        key={index}
        style={{
          backgroundColor: "#ffe58a",
          fontWeight: "bold",
          padding: "0 2px",
          borderRadius: "2px",
        }}
      >
        {part}
      </span>
    ) : (
      part
    )
  );
};

return (
  <Typography
    variant="h10"
    style={{
      color: "#333",
      fontSize: 14,
    }}
  >
    {highlightedData.length > 0 ? (
      highlightedData.map(({ key, value }, i) => (
        <span key={i}>
          <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
          <br />
        </span>
      ))
    ) : (
      <span>No matches found</span>
    )}
  </Typography>
);




77777777777777


const getHighlightedData = (obj) => {
  const result = [];
  const escapedSearchTerm = escapeRegExp(searchTerm.trim().toLowerCase());

  Object.entries(obj).forEach(([key, value]) => {
    if (typeof value === "object" && value !== null) {
      // Recursively process nested objects
      result.push(...getHighlightedData(value));
    } else {
      // Match keys or values against the searchTerm
      const keyMatches = key.toLowerCase().includes(escapedSearchTerm);
      const valueMatches =
        typeof value === "string" &&
        value.toLowerCase().includes(escapedSearchTerm);

      if (keyMatches || valueMatches) {
        result.push({ key, value });
      }
    }
  });

  return result;
};


<Typography
  variant="h10"
  style={{
    color: "#333",
    fontSize: 14,
  }}
>
  {highlightedData.length > 0 ? (
    highlightedData.map(({ key, value }, i) => (
      <span key={i}>
        <strong>{highlightText(key)}:</strong> {highlightText(value?.toString())}
        <br />
      </span>
    ))
  ) : (
    <span>No matches found</span>
  )}
</Typography>


import React, { useState } from "react";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
// import AddCircleRoundedIcon from "@mui/icons-material/AddCircleRounded";
// import RemoveCircleRoundedIcon from "@mui/icons-material/RemoveCircleRounded";
// import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
// import ChevronRightIcon from '@mui/icons-material/ChevronRight';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { Button, IconButton, Modal, TextField } from "@mui/material";
import { TreeItem, RichTreeView } from "@mui/x-tree-view";

const HighlightedCardItem = ({ item, searchTerm }) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [filterText, setFilterText] = useState("");
  const escapeRegExp = (string) => {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // Escapes special characters for regex
  };
  
  const highlightText = (text) => {
    if (!searchTerm || typeof text !== "string") return text;
  
    // Escape special characters in the searchTerm and create regex for multiple words
    const escapedSearchTerm = escapeRegExp(searchTerm.trim());
    const words = escapedSearchTerm.split(/\s+/).map((word) => escapeRegExp(word)); // Split into words
    const regex = new RegExp(`(${words.join("|")})`, "gi"); // Create regex for all words
  
    // Split text into parts using the regex
    const parts = text.split(regex);
  
    return parts.map((part, index) =>
      regex.test(part) ? (
        <span
          key={index}
          style={{
            backgroundColor: "#ffe58a",
            fontWeight: "bold",
            padding: "0 2px",
            borderRadius: "2px",
          }}
        >
          {part}
        </span>
      ) : (
        part
      )
    );
  };
  

  const renderJSON = (obj, parentKey = "") => {
    return Object.entries(obj).map(([key, value]) => {
      const isExpandable = typeof value === "object" && value !== null;
      const matchesFilter =
        key.toLowerCase().includes(filterText.toLowerCase()) ||
        (!isExpandable &&
          value?.toString().toLowerCase().includes(filterText.toLowerCase()));

      if (!matchesFilter) return null;

      return (
        <div key={`${parentKey}.${key}`} style={{ marginLeft: "20px", marginBottom: "5px" }}>
          <Typography
            variant="body2"
            component="span"
            style={{ fontWeight: "bold", color: "#3f51b5", fontSize: 12 }}
          >
            {highlightText(key)}:
          </Typography>{" "}
          {isExpandable ? (
            <div>{renderJSON(value, `${parentKey}.${key}`)}</div>
          ) : (
            <Typography variant="body2" component="span" style={{ fontSize: 12 }}>
              {highlightText(value?.toString())}
            </Typography>
          )}
        </div>
      );
    });
  };

  
  // Recursive function to render tree items
  const renderTreeItems = (data, parentKey = "") => {
    if (data === null || data === undefined) return null;

    return Object.entries(data).map(([key, value]) => {
      const nodeId = `${parentKey}-${key}`;
      const isExpandable = typeof value === "object" && value !== null;

      // Check if the key or value matches the filter
      const matchesFilter =
        key.toLowerCase().includes(filterText.toLowerCase()) ||
        (typeof value === "string" &&
          value.toLowerCase().includes(filterText.toLowerCase()));

      // Skip items that don't match the filter
      if (filterText && !matchesFilter) return null;

      return (
        <TreeItem
          key={nodeId}
          nodeId={nodeId}
          label={
            <span>
              <strong>{key}:</strong> {isExpandable ? null : value?.toString()}
            </span>
          }
        >
          {isExpandable && renderTreeItems(value, nodeId)}
        </TreeItem>
      );
    });
  };

  const getHighlightedData = (obj) => {
    const result = [];
    Object.entries(obj).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        result.push(...getHighlightedData(value));
      } else if (
        (key.toLowerCase().includes(searchTerm.toLowerCase()) ||
          value?.toString().toLowerCase().includes(searchTerm.toLowerCase())) &&
        searchTerm
      ) {
        result.push({ key, value });
      }
    });
    return result;
  };

  const highlightedData = getHighlightedData(item);

  return (
    <Card
  variant="outlined"
  style={{
    marginBottom: "20px",
    border: "1px solid #ddd",
    boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.2)",
    borderRadius: "10px",
    width: "80%",
    margin: "20px auto", // Centers the Card horizontally
  }}
>
  
      <CardContent
        style={{
          backgroundColor: "#f9f9f9",
          padding: "20px",
          borderBottom: "1px solid #ddd",

        }}
      >

        <Box
          style={{
            display: "flex",
            alignItems: "center", // Vertically align items
            justifyContent: "space-between", // Text on the left, button on the right
            padding: "10px 0", // Add vertical spacing around the row
          }}
        >
          <Typography
            variant="h10"
            style={{
              color: "#333",
              fontSize: 14,
            }}
          >
            {highlightedData.length > 0 ? (
              highlightedData.map(({ key, value }, i) => (

                <span key={i}>
                  <strong>{highlightText(key)}:</strong>{highlightText(value?.toString())}
                  <br/>
                </span>
              ))
            ) : (
              <span>No matches found</span>
            )}


  
          </Typography>

          <IconButton onClick={() => setModalOpen(true)}>
            <VisibilityIcon sx={{ color: "grey" }} />
          </IconButton>
        </Box>

      </CardContent>

      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        aria-labelledby="json-modal"
        aria-describedby="json-modal-description"
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "600px",
            bgcolor: "background.paper",
            border: "1px solid #ddd",
            borderRadius: "10px",
            boxShadow: 24,
            p: 4,
            maxHeight: "80%",
            overflowY: "auto",
          }}
        >
          <Typography
            id="json-modal"
            variant="h6"
            component="h2"
            sx={{ textAlign: "center", marginBottom: "20px", color: "#3f51b5" }}
          >
            JSON Viewer
          </Typography>

          <TextField
            fullWidth
            variant="outlined"
            size="small"
            label="Filter JSON"
            value={filterText}
            onChange={(e) => setFilterText(e.target.value)}
            sx={{
              marginBottom: "20px",
            }}
          />

          {/* <RichTreeView
            defaultCollapseIcon={<ExpandMoreIcon />}
            defaultExpandIcon={<ChevronRightIcon />}
            sx={{ flexGrow: 1, overflowY: "auto" }}
          > */}
            {renderJSON(item)}
          {/* </RichTreeView> */}

          <Box sx={{ textAlign: "center", marginTop: "20px" }}>
            <button
              onClick={() => setModalOpen(false)}
              style={{
                backgroundColor: "#3f51b5",
                color: "#fff",
                padding: "10px 20px",
                border: "none",
                borderRadius: "5px",
                cursor: "pointer",
              }}
            >
              Close
            </button>
          </Box>
        </Box>
      </Modal>
    </Card>
  );
};

const HighlightedCard = ({ data, searchTerm }) => {
  return (
    <div style={{ padding: "20px" }}>
      {data.map((item, index) => (
        <HighlightedCardItem key={index} item={item} searchTerm={searchTerm} />
      ))}
    </div>
  );
};

export default HighlightedCard;

